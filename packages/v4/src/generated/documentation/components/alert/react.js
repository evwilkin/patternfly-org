import React from 'react';
import { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';
import '../../../../../../../node_modules/@patternfly/react-core/src/components/Alert/examples/./alert.css';

export const DocumentationComponentsAlertReactDocs = {
  "slug": "/documentation/components/alert/react",
  "source": "react",
  "propComponents": [
    "Alert",
    "AlertActionCloseButton",
    "AlertActionLink"
  ],
  "sourceLink": "https://github.com/patternfly/patternfly-react/blob/master/packages/react-core/src/components/Alert/examples/Alert.md",
  "section": "components",
  "id": "Alert",
  "title": "Alert",
  "toc": [
    "Examples"
  ],
  "cssPrefix": "pf-c-alert"
};
DocumentationComponentsAlertReactDocs.liveContext = {
  
};
DocumentationComponentsAlertReactDocs.Component = () => (
  <React.Fragment>
    <AutoLinkHeader {...{"size":"h2","className":"ws-title ws-h2"}}>
      {`Examples`}
    </AutoLinkHeader>
    <Example {...DocumentationComponentsAlertReactDocs} {...{"code":"import React from 'react';\nimport { Alert } from '@patternfly/react-core';\n\nclass AlertTypes extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Alert title=\"Default alert title\" />\n        <Alert variant=\"info\" title=\"Info alert title\" />\n        <Alert variant=\"success\" title=\"Success alert title\" />\n        <Alert variant=\"warning\" title=\"Warning alert title\" />\n        <Alert variant=\"danger\" title=\"Danger alert title\" />\n      </React.Fragment>\n    );\n  }\n}","title":"Types","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsAlertReactDocs} {...{"code":"import React from 'react';\nimport { Alert, AlertActionCloseButton, AlertActionLink } from '@patternfly/react-core';\n\nclass AlertVariations extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Alert\n          variant=\"success\"\n          title=\"Success alert title\"\n          actionClose={<AlertActionCloseButton onClose={() => alert('Clicked the close button')} />}\n          actionLinks={\n            <React.Fragment>\n              <AlertActionLink onClick={() => alert('Clicked on View details')}>View details</AlertActionLink>\n              <AlertActionLink onClick={() => alert('Clicked on Ignore')}>Ignore</AlertActionLink>\n            </React.Fragment>\n          }\n        >\n          <p>Success alert description. This should tell the user more information about the alert.</p>\n        </Alert>\n        <Alert variant=\"success\" title=\"Success alert title\" actionClose={<AlertActionCloseButton onClose={() => alert('Clicked the close button')} />}>\n          <p>\n            Success alert description. This should tell the user more information about the alert.{' '}\n            <a href=\"#\">This is a link.</a>\n          </p>\n        </Alert>\n        <Alert\n          variant=\"success\"\n          title=\"Success alert title\"\n          actionClose={<AlertActionCloseButton onClose={() => alert('Clicked the close button')} />}\n          actionLinks={\n            <React.Fragment>\n              <AlertActionLink onClick={() => alert('Clicked on View details')}>View details</AlertActionLink>\n              <AlertActionLink onClick={() => alert('Clicked on Ignore')}>Ignore</AlertActionLink>\n            </React.Fragment>\n          }\n        />\n        <Alert variant=\"success\" title=\"Success alert title\" actionClose={<AlertActionCloseButton onClose={() => alert('Clicked the close button')} />} />\n        <Alert variant=\"success\" title=\"Success alert title\" />\n      </React.Fragment>\n    );\n  }\n}","title":"Variations","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsAlertReactDocs} {...{"code":"import React from 'react';\nimport { Alert } from '@patternfly/react-core';\n\nclass InlineAlert extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Alert variant=\"default\" isInline title=\"Default inline alert title\" />\n        <Alert variant=\"info\" isInline title=\"Info inline alert title\" />\n        <Alert variant=\"success\" isInline title=\"Success inline alert title\" />\n        <Alert variant=\"warning\" isInline title=\"Warning inline alert title\" />\n        <Alert variant=\"danger\" isInline title=\"Danger inline alert title\" />\n      </React.Fragment>\n    );\n  }\n}","title":"Inline types","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsAlertReactDocs} {...{"code":"import React from 'react';\nimport { Alert, AlertActionCloseButton, AlertActionLink } from '@patternfly/react-core';\n\nclass InlineAlertVariations extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Alert\n          isInline\n          variant=\"success\"\n          title=\"Success alert title\"\n          actionClose={<AlertActionCloseButton onClose={() => alert('Clicked the close button')} />}\n          actionLinks={\n            <React.Fragment>\n              <AlertActionLink onClick={() => alert('Clicked on View details')}>View details</AlertActionLink>\n              <AlertActionLink onClick={() => alert('Clicked on Ignore')}>Ignore</AlertActionLink>\n            </React.Fragment>\n          }\n        >\n          <p>Success alert description. This should tell the user more information about the alert.</p>\n        </Alert>\n        <Alert isInline variant=\"success\" title=\"Success alert title\" actionClose={<AlertActionCloseButton onClose={() => alert('Clicked the close button')} />}>\n          <p>\n            Success alert description. This should tell the user more information about the alert.{' '}\n            <a href=\"#\">This is a link.</a>\n          </p>\n        </Alert>\n        <Alert\n          isInline\n          variant=\"success\"\n          title=\"Success alert title\"\n          actionClose={<AlertActionCloseButton onClose={() => alert('Clicked the close button')} />}\n          actionLinks={\n            <React.Fragment>\n              <AlertActionLink onClick={() => alert('Clicked on View details')}>View details</AlertActionLink>\n              <AlertActionLink onClick={() => alert('Clicked on Ignore')}>Ignore</AlertActionLink>\n            </React.Fragment>\n          }\n        />\n        <Alert\n          isInline\n          variant=\"success\"\n          title=\"Success alert title\"\n          actionClose={<AlertActionCloseButton onClose={() => alert('Clicked the close button')} />}\n        />\n        <Alert isInline variant=\"success\" title=\"Success alert title\" />\n      </React.Fragment>\n    );\n  }\n}","title":"Inline variations","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsAlertReactDocs} {...{"code":"import React from 'react';\nimport { Alert, AlertActionCloseButton } from '@patternfly/react-core';\n\nclass StaticLiveRegionAlert extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Alert\n          isLiveRegion\n          variant=\"info\"\n          title=\"Default live region configuration\"\n          actionClose={<AlertActionCloseButton onClose={() => alert('Clicked the close button')} />}\n        >\n          This Alert uses the recommended <code>isLiveRegion</code> prop to automatically sets ARIA attributes and CSS\n          classes.\n        </Alert>\n        <Alert\n          aria-live=\"assertive\"\n          aria-relevant=\"additions text\"\n          aria-atomic=\"true\"\n          variant=\"info\"\n          title=\"Customized live region\"\n          actionClose={<AlertActionCloseButton onClose={() => alert('Clicked the close button')} />}\n        >\n          You can alternatively omit the <code>isLiveRegion</code> prop to specify ARIA attributes and CSS manually on\n          the containing element.\n        </Alert>\n      </React.Fragment>\n    );\n  }\n}","title":"Static live region alert","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsAlertReactDocs} {...{"code":"import React from 'react';\nimport { Alert, InputGroup } from '@patternfly/react-core';\n\nclass DynamicLiveRegionAlert extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      alerts: []\n    };\n  }\n\n  render() {\n    const addAlert = alertProps => {\n      this.setState({ alerts: [...this.state.alerts, alertProps] });\n    };\n    const getUniqueId = () => new Date().getTime();\n    const addSuccessAlert = () => {\n      addAlert({\n        title: 'Single Success Alert',\n        variant: 'success',\n        isLiveRegion: true,\n        key: getUniqueId()\n      });\n    };\n    const addInfoAlert = () => {\n      addAlert({\n        title: 'Single Info Alert',\n        variant: 'info',\n        ariaLive: 'polite',\n        ariaRelevant: 'additions text',\n        ariaAtomic: 'false',\n        key: getUniqueId()\n      });\n    };\n    const addDangerAlert = () => {\n      addAlert({\n        title: 'Single Danger Alert',\n        variant: 'danger',\n        ariaLive: 'assertive',\n        ariaRelevant: 'additions text',\n        ariaAtomic: 'false',\n        key: getUniqueId()\n      });\n    };\n    const btnClasses = ['pf-c-button', 'pf-m-secondary'].join(' ');\n    return (\n      <React.Fragment>\n        <InputGroup style={{ marginBottom: '16px' }}>\n          <button onClick={addSuccessAlert} type=\"button\" className={btnClasses}>\n            Add Single Success Alert\n          </button>\n          <button onClick={addInfoAlert} type=\"button\" className={btnClasses}>\n            Add Single Info Alert\n          </button>\n          <button onClick={addDangerAlert} type=\"button\" className={btnClasses}>\n            Add Single Danger Alert\n          </button>\n        </InputGroup>\n        {this.state.alerts.map(({ title, variant, isLiveRegion, ariaLive, ariaRelevant, ariaAtomic, key }) => (\n          <Alert\n            variant={variant}\n            title={title}\n            isLiveRegion={isLiveRegion}\n            aria-live={ariaLive}\n            aria-relevant={ariaRelevant}\n            aria-atomic={ariaAtomic}\n            key={key}\n          />\n        ))}\n      </React.Fragment>\n    );\n  }\n}","title":"Dynamic live region alert","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsAlertReactDocs} {...{"code":"import React from 'react';\nimport { Alert, InputGroup } from '@patternfly/react-core';\n\nclass AsyncLiveRegionAlert extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      alerts: [],\n      timer: null\n    };\n    this.stopAsyncAlerts = () => {\n      clearInterval(this.state.timer);\n    };\n  }\n  componentWillUnmount() {\n    this.stopAsyncAlerts();\n  }\n  render() {\n    const addAlert = incomingAlerts => {\n      this.setState({ alerts: [...this.state.alerts, incomingAlerts] });\n    };\n    const getUniqueId = () => new Date().getTime();\n    const startAsyncAlerts = () => {\n      let timerValue = setInterval(() => {\n        addAlert({\n          title: `This is a async alert number ${this.state.alerts.length + 1}`,\n          variant: 'info',\n          isLiveRegion: true,\n          key: getUniqueId()\n        });\n      }, 1500);\n      this.setState({ timer: timerValue });\n    };\n    const btnClasses = ['pf-c-button', 'pf-m-secondary'].join(' ');\n    return (\n      <React.Fragment>\n        <InputGroup style={{ marginBottom: '16px' }}>\n          <button onClick={startAsyncAlerts} type=\"button\" className={btnClasses}>\n            Start Async Info Alerts\n          </button>\n          <button onClick={this.stopAsyncAlerts} type=\"button\" className={btnClasses}>\n            Stop Async Info Alerts\n          </button>\n        </InputGroup>\n        {this.state.alerts.map(({ title, variant, isLiveRegion, key }) => (\n          <Alert variant={variant} title={title} isLiveRegion={isLiveRegion} key={key} />\n        ))}\n      </React.Fragment>\n    );\n  }\n}","title":"Async live region alert","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsAlertReactDocs} {...{"code":"import React from 'react';\nimport { Alert, Button } from '@patternfly/react-core';\n\nclass AlertTimeout extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      isOpen: false\n    };\n    this.onClick = () => {\n      this.setState({isOpen:true})\n    };\n  } \n\n  render() {\n    const { isOpen } = this.state;\n    const buttonText = !isOpen ? \"Show 2 alerts\" : \"0 alerts to show\";\n    return (\n      <React.Fragment>\n        <Button variant=\"secondary\" onClick={this.onClick} isDisabled={isOpen} >{buttonText} </Button>\n        {this.state.isOpen &&\n        <React.Fragment>\n          <Alert title=\"Default timeout Alert\" timeout={true}>This alert will dismiss after 8 seconds </Alert>\n          <Alert title=\"Custom timeout Alert\" timeout={16000}>This alert will dismiss after 16 seconds </Alert>\n        </React.Fragment>\n        }\n      </React.Fragment>\n    );\n  }\n}","title":"Alert timeout","lang":"js"}}>
    </Example>
  </React.Fragment>
);
DocumentationComponentsAlertReactDocs.Component.displayName = 'DocumentationComponentsAlertReactDocs';
