import React from 'react';
import { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';


export const DocumentationComponentsFormSelectReactDocs = {
  "slug": "/documentation/components/form-select/react",
  "source": "react",
  "propComponents": [
    "FormSelect",
    "FormSelectOption",
    "FormSelectOptionGroup"
  ],
  "sourceLink": "https://github.com/patternfly/patternfly-react/blob/master/packages/react-core/src/components/FormSelect/examples/FormSelect.md",
  "section": "components",
  "id": "Form select",
  "title": "Form select",
  "toc": [
    "Examples"
  ],
  "cssPrefix": "pf-c-form-control"
};
DocumentationComponentsFormSelectReactDocs.liveContext = {
  
};
DocumentationComponentsFormSelectReactDocs.Component = () => (
  <React.Fragment>
    <AutoLinkHeader {...{"size":"h2","className":"ws-title ws-h2"}}>
      {`Examples`}
    </AutoLinkHeader>
    <Example {...DocumentationComponentsFormSelectReactDocs} {...{"code":"import React from 'react';\nimport { FormSelect, FormSelectOption, FormSelectOptionGroup } from '@patternfly/react-core';\n\nclass FormSelectInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 'mrs'\n    };\n    this.onChange = (value, event) => {\n      this.setState({ value });\n    };\n    this.options = [\n      { value: 'please choose', label: 'Please Choose', disabled: true },\n      { value: 'mr', label: 'Mr', disabled: false },\n      { value: 'miss', label: 'Miss', disabled: false },\n      { value: 'mrs', label: 'Mrs', disabled: false },\n      { value: 'ms', label: 'Ms', disabled: false },\n      { value: 'dr', label: 'Dr', disabled: false },\n      { value: 'other', label: 'Other', disabled: false }\n    ];\n  }\n\n  render() {\n    return (\n      <FormSelect value={this.state.value} onChange={this.onChange} aria-label=\"FormSelect Input\">\n        {this.options.map((option, index) => (\n          <FormSelectOption isDisabled={option.disabled} key={index} value={option.value} label={option.label} />\n        ))}\n      </FormSelect>\n    );\n  }\n}","title":"Basic","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsFormSelectReactDocs} {...{"code":"import React from 'react';\nimport { FormSelect, FormSelectOption, FormSelectOptionGroup, ValidatedOptions } from '@patternfly/react-core';\n\nclass FormSelectInputInvalid extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      validated: ValidatedOptions.default\n    };\n    this.isEmpty = () => this.state.value !== '';\n    this.onChange = (value, event) => {\n      const validated = this.isEmpty() && ValidatedOptions.error\n      this.setState({ value, validated });\n    };\n    this.options = [\n      { value: '', label: 'Choose a number', disabled: false },\n      { value: '1', label: 'One', disabled: false },\n      { value: '2', label: 'Two', disabled: false },\n      { value: '3', label: 'Three', disabled: false }\n    ];\n  }\n\n  render() {\n    const { value, validated } = this.state;\n\n    return (\n      <FormSelect\n        validated={validated}\n        value={value}\n        onChange={this.onChange}\n        aria-label=\"FormSelect Input\"\n      >\n        {this.options.map((option, index) => (\n          <FormSelectOption isDisabled={option.disabled} key={index} value={option.value} label={option.label} />\n        ))}\n      </FormSelect>\n    );\n  }\n}","title":"Invalid","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsFormSelectReactDocs} {...{"code":"import React from 'react';\nimport { Form, FormGroup, FormSelect, FormSelectOption, FormSelectOptionGroup, ValidatedOptions } from '@patternfly/react-core';\n\nclass FormSelectInputInvalid extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      invalidText: 'You must choose something',\n      validated: ValidatedOptions.default,\n      helperText: 'Make a selection'\n    };\n\n    this.simulateNetworkCall = callback => {\n      setTimeout(callback, 2000);\n    };\n\n    this.onChange = (value, event) => {\n      this.setState(\n        { value, validated: ValidatedOptions.default, helperText: 'Validating...' },\n        this.simulateNetworkCall(() => {\n          if (value === '3') {\n            this.setState({ validated: ValidatedOptions.success, helperText: 'You chose wisely' });\n          } else if (value === '') {\n              this.setState({ validated: ValidatedOptions.warning, helperText: 'You must select a value' });\n          } else {\n            this.setState({ validated: ValidatedOptions.error, invalidText: 'You must chose Three (thought that was obvious)' });\n          }\n        })\n      );\n    };\n\n    this.options = [\n      { value: '', label: 'Choose a number', disabled: false },\n      { value: '1', label: 'One', disabled: false },\n      { value: '2', label: 'Two', disabled: false },\n      { value: '3', label: 'Three - the only valid option', disabled: false }\n    ];\n  }\n\n  render() {\n    const { value, validated, helperText, invalidText } = this.state;\n    return (\n      <Form>\n        <FormGroup\n          label=\"Selection:\"\n          type=\"string\"\n          helperText={helperText}\n          helperTextInvalid={invalidText}\n          fieldId=\"selection\"\n          validated={validated}\n        >\n          <FormSelect\n            id=\"selection\"\n            validated={validated}\n            value={value}\n            onChange={this.onChange}\n            aria-label=\"FormSelect Input\"\n          >\n            {this.options.map((option, index) => (\n              <FormSelectOption isDisabled={option.disabled} key={index} value={option.value} label={option.label} />\n            ))}\n          </FormSelect>\n        </FormGroup>\n      </Form>\n    );\n  }\n}","title":"Validated","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsFormSelectReactDocs} {...{"code":"import React from 'react';\nimport { FormSelect, FormSelectOption, FormSelectOptionGroup } from '@patternfly/react-core';\n\nclass FormSelectInputDisabled extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 'mrs'\n    };\n    this.onChange = (value, event) => {\n      this.setState({ value });\n    };\n    this.options = [\n      { value: 'please choose', label: 'Please Choose', disabled: true },\n      { value: 'mr', label: 'Mr', disabled: false },\n      { value: 'miss', label: 'Miss', disabled: false },\n      { value: 'mrs', label: 'Mrs', disabled: false },\n      { value: 'ms', label: 'Ms', disabled: false },\n      { value: 'dr', label: 'Dr', disabled: false },\n      { value: 'other', label: 'Other', disabled: false }\n    ];\n  }\n\n  render() {\n    return (\n      <FormSelect value={this.state.value} onChange={this.onChange} isDisabled aria-label=\"FormSelect Input\">\n        {this.options.map((option, index) => (\n          <FormSelectOption isDisabled={option.disabled} key={index} value={option.value} label={option.label} />\n        ))}\n      </FormSelect>\n    );\n  }\n}","title":"Disabled","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsFormSelectReactDocs} {...{"code":"import React from 'react';\nimport { FormSelect, FormSelectOption, FormSelectOptionGroup } from '@patternfly/react-core';\n\nclass FormSelectInputGrouped extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '2'\n    };\n    this.onChange = (value, event) => {\n      this.setState({ value });\n    };\n    this.groups = [\n      {\n        groupLabel: 'Group1',\n        disabled: false,\n        options: [\n          { value: '1', label: 'The First Option', disabled: false },\n          { value: '2', label: 'Second option is selected by default', disabled: false }\n        ]\n      },\n      {\n        groupLabel: 'Group2',\n        disabled: false,\n        options: [\n          { value: '3', label: 'The Third Option', disabled: false },\n          { value: '4', label: 'The Fourth option', disabled: false }\n        ]\n      },\n      {\n        groupLabel: 'Group3',\n        disabled: true,\n        options: [\n          { value: '5', label: 'The Fifth Option', disabled: false },\n          { value: '6', label: 'The Sixth option', disabled: false }\n        ]\n      }\n    ];\n    this.getOptionLbl = option => option.label;\n    this.getOptionVal = option => option.value;\n    this.getOptionsGroupLbl = group => group && group.groupLabel;\n    this.getGroupOptions = group => group && group.options;\n  }\n\n  render() {\n    return (\n      <FormSelect value={this.state.value} onChange={this.onChange} aria-label=\"FormSelect Input\">\n        {this.groups.map((group, index) => (\n          <FormSelectOptionGroup isDisabled={group.disabled} key={index} label={group.groupLabel}>\n            {group.options.map((option, i) => (\n              <FormSelectOption isDisabled={option.disabled} key={i} value={option.value} label={option.label} />\n            ))}\n          </FormSelectOptionGroup>\n        ))}\n      </FormSelect>\n    );\n  }\n}","title":"Grouped","lang":"js"}}>
    </Example>
  </React.Fragment>
);
DocumentationComponentsFormSelectReactDocs.Component.displayName = 'DocumentationComponentsFormSelectReactDocs';
