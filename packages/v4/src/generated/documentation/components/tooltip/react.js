import React from 'react';
import { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';
import { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';
import '../../../../../../../node_modules/@patternfly/react-core/src/components/Tooltip/examples/./TooltipExamples.css';

export const DocumentationComponentsTooltipReactDocs = {
  "slug": "/documentation/components/tooltip/react",
  "source": "react",
  "propComponents": [
    "Tooltip"
  ],
  "sourceLink": "https://github.com/patternfly/patternfly-react/blob/master/packages/react-core/src/components/Tooltip/examples/Tooltip.md",
  "section": "components",
  "id": "Tooltip",
  "title": "Tooltip",
  "toc": [
    "Examples"
  ],
  "cssPrefix": "pf-c-tooltip"
};
DocumentationComponentsTooltipReactDocs.liveContext = {
  OutlinedQuestionCircleIcon
};
DocumentationComponentsTooltipReactDocs.Component = () => (
  <React.Fragment>
    <AutoLinkHeader {...{"size":"h2","className":"ws-title ws-h2"}}>
      {`Examples`}
    </AutoLinkHeader>
    <Example {...DocumentationComponentsTooltipReactDocs} {...{"code":"import React from 'react';\nimport { Tooltip } from '@patternfly/react-core';\n\nBasicTooltip = () => (\n  <div style={{ margin: '100px' }}>\n    <Tooltip\n      content={\n        <div>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam id feugiat augue, nec fringilla turpis.</div>\n      }\n    >\n      <span tabIndex=\"0\" style={{ border: '1px dashed' }}>I have a tooltip!</span>\n    </Tooltip>\n  </div>\n)","title":"Basic","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsTooltipReactDocs} {...{"code":"import React from 'react';\nimport { Tooltip } from '@patternfly/react-core';\n\nTooltipReactRef = () => {\n  const tooltipRef = React.useRef();\n  return (\n  <div style={{ margin: '100px' }}>\n    <button ref={tooltipRef}>Tooltip attached via react ref</button>\n    <Tooltip\n      content={\n        <div>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam id feugiat augue, nec fringilla turpis.</div>\n      }\n      reference={tooltipRef}\n    />\n  </div>\n)}","title":"Tooltip react ref","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsTooltipReactDocs} {...{"code":"import React from 'react';\nimport { Tooltip } from '@patternfly/react-core';\n\nTooltipSelectorRef = () => (\n  <div style={{ margin: '100px' }}>\n    <button id=\"tooltip-selector\">Tooltip attached via selector ref</button>\n    <Tooltip\n      content={\n        <div>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam id feugiat augue, nec fringilla turpis.</div>\n      }\n      reference={() => document.getElementById('tooltip-selector')}\n    />\n  </div>\n)","title":"Tooltip selector ref","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsTooltipReactDocs} {...{"code":"import React from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\n\nOnIconTooltip = () => (\n  <div style={{ margin: '100px' }}>\n    <Tooltip\n      position=\"top\"\n      content={\n        <div>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam id feugiat augue, nec fringilla turpis.</div>\n      }\n    >\n      <OutlinedQuestionCircleIcon />\n    </Tooltip>\n  </div>\n)","title":"On icon","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsTooltipReactDocs} {...{"code":"import React from 'react';\nimport { Button, Tooltip, Checkbox, Select, SelectOption, TextInput } from '@patternfly/react-core';\n\nOptionsTooltip = () => {\n  const [trigger, setTrigger] = React.useState(['mouseenter', 'focus']);\n  const [isVisible, setIsVisible] = React.useState(true);\n  const [contentLeftAligned, setContentLeftAligned] = React.useState(false);\n  const [enableFlip, setEnableFlip] = React.useState(true);\n  const [position, setPosition] = React.useState('top');\n  const [positionSelectOpen, setPositionSelectOpen] = React.useState(false);\n  const [flipSelectOpen, setFlipSelectOpen] = React.useState(false);\n  const [flipBehavior, setFlipBehavior] = React.useState('flip');\n  const [entryDelayInput, setEntryDelayInput] = React.useState(0);\n  const [exitDelayInput, setExitDelayInput] = React.useState(0);\n  const [animationDuration, setAnimationDuration] = React.useState(300);\n  const tipBoxRef = React.useRef(null);\n  const scrollToRef = ref => ref && ref.current && (ref.current.scrollTop = 400);\n  React.useEffect(() => {\n    scrollToRef(tipBoxRef);\n  }, []);\n  return (\n    <>\n      <div>\n        <div style={{ border: '1px solid'}}>\n          <Checkbox\n            label=\"trigger: mouseenter\"\n            isChecked={trigger.includes('mouseenter')}\n            onChange={(checked) => {\n              let updatedTrigger;\n              checked && (updatedTrigger = trigger.concat('mouseenter'));\n              !checked && (updatedTrigger = trigger.filter(t => t !== 'mouseenter'));\n              setIsVisible(false);\n              setTrigger(updatedTrigger);\n            }}\n          />\n          <Checkbox\n            label=\"trigger: focus\"\n            isChecked={trigger.includes('focus')}\n            onChange={(checked) => {\n              let updatedTrigger;\n              checked && (updatedTrigger = trigger.concat('focus'));\n              !checked && (updatedTrigger = trigger.filter(t => t !== 'focus'));\n              setIsVisible(false);\n              setTrigger(updatedTrigger);\n            }}\n          />\n          <Checkbox\n            label=\"trigger: click\"\n            isChecked={trigger.includes('click')}\n            onChange={(checked) => {\n              let updatedTrigger;\n              checked && (updatedTrigger = trigger.concat('click'));\n              !checked && (updatedTrigger = trigger.filter(t => t !== 'click'));\n              setIsVisible(false);\n              setTimeout(() => setTrigger(updatedTrigger));\n            }}\n          />\n          <Checkbox\n            label=\"trigger: manual\"\n            isChecked={trigger.includes('manual')}\n            onChange={(checked) => {\n              let updatedTrigger;\n              checked && (updatedTrigger = trigger.concat('manual'));\n              !checked && (updatedTrigger = trigger.filter(t => t !== 'manual'));\n              setIsVisible(false);\n              setTrigger(updatedTrigger);\n            }}\n          />\n        </div>\n        <div style={{ border: '1px solid'}}>\n          <Checkbox\n            label=\"content left-aligned\"\n            isChecked={contentLeftAligned}\n            onChange={(checked) => setContentLeftAligned(checked)}\n          />\n        </div>\n        <div style={{ border: '1px solid'}}>\n          <Checkbox\n            label=\"enableFlip\"\n            isChecked={enableFlip}\n            onChange={(checked) => setEnableFlip(checked)}\n          />\n        </div>\n        <div style={{ border: '1px solid'}}>\n          position (will flip if enableFlip is true). The 'auto' position requires enableFlip to be set to true.\n          <Select\n            onToggle={() => setPositionSelectOpen(!positionSelectOpen)}\n            onSelect={(event, selection) => {\n              setPosition(selection);\n              setPositionSelectOpen(false);\n            }}\n            isOpen={positionSelectOpen}\n            selections={position}\n            menuAppendTo={() => document.body}\n          >\n            <SelectOption value=\"auto\" />\n            <SelectOption value=\"top\" />\n            <SelectOption value=\"bottom\" />\n            <SelectOption value=\"left\" />\n            <SelectOption value=\"right\" />\n          </Select>\n        </div>\n        <div style={{ border: '1px solid'}}>\n          <Checkbox\n            label=\"isVisible (also set trigger to only manual to programmatically control it)\"\n            isChecked={isVisible}\n            onChange={(checked) => setIsVisible(checked)}\n          />\n        </div>\n        <div style={{ border: '1px solid'}}>\n          Entry delay <TextInput value={entryDelayInput} type=\"number\" onChange={val => setEntryDelayInput(val)} aria-label=\"entry delay\" />\n          Exit delay <TextInput value={exitDelayInput} type=\"number\" onChange={val => setExitDelayInput(val)} aria-label=\"exit delay\" />\n          Animation duration <TextInput value={animationDuration} type=\"number\" onChange={val => setAnimationDuration(val)} aria-label=\"animation duration\" />\n        </div>\n        <div style={{ border: '1px solid'}}>\n          flip behavior examples (enableFlip has to be true). \"flip\" will try to flip the tooltip to the opposite of the starting position. The second option ensures that there are 3 escape positions for every possible starting position (default). This setting is ignored if position prop is set to 'auto'.\n          <Select\n            onToggle={() => setFlipSelectOpen(!flipSelectOpen)}\n            onSelect={(event, selection) => {\n              console.log(selection);\n              setFlipBehavior(selection);\n              setFlipSelectOpen(false);\n            }}\n            isOpen={flipSelectOpen}\n            selections={flipBehavior}\n            menuAppendTo={() => document.body}\n          >\n            <SelectOption value=\"flip\" />\n            <SelectOption value=\"clockwise\">['top', 'right', 'bottom', 'left', 'top', 'right', 'bottom']</SelectOption>\n          </Select>\n        </div>\n      </div>\n      <div id=\"tooltip-boundary\" className=\"tooltip-box\" ref={tipBoxRef}>\n        <Tooltip\n          content={\n            <div>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam id feugiat augue, nec fringilla turpis.</div>\n          }\n          trigger={trigger.join(' ')}\n          enableFlip={enableFlip}\n          flipBehavior={flipBehavior === 'flip' ? 'flip' : ['top', 'right', 'bottom', 'left', 'top', 'right', 'bottom']}\n          position={position}\n          isVisible={isVisible}\n          entryDelay={entryDelayInput}\n          exitDelay={exitDelayInput}\n          animationDuration={animationDuration}\n          isContentLeftAligned={contentLeftAligned}\n          appendTo={() => document.getElementById('tooltip-boundary')}\n        >\n          <Button className=\"tooltip-button\">Tooltip</Button>\n        </Tooltip>\n      </div>\n    </>\n  );\n}","title":"Options","lang":"js"}}>
    </Example>
  </React.Fragment>
);
DocumentationComponentsTooltipReactDocs.Component.displayName = 'DocumentationComponentsTooltipReactDocs';
