import React from 'react';
import { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';
import { Button, Wizard, WizardFooter, WizardContextConsumer, ModalVariant, Alert, EmptyState, EmptyStateIcon, EmptyStateBody, EmptyStateSecondaryActions, Title, Progress } from '@patternfly/react-core';
import { ExternalLinkAltIcon, SlackHashIcon, CogsIcon } from '@patternfly/react-icons';
import FinishedStep from '../../../../../../../node_modules/@patternfly/react-core/src/components/Wizard/examples/./FinishedStep';
import SampleForm from '../../../../../../../node_modules/@patternfly/react-core/src/components/Wizard/examples/./SampleForm';

export const DocumentationComponentsWizardReactDocs = {
  "slug": "/documentation/components/wizard/react",
  "source": "react",
  "propComponents": [
    "Wizard",
    "WizardNav",
    "WizardNavItem",
    "WizardHeader",
    "WizardBody",
    "WizardFooter",
    "WizardToggle"
  ],
  "sourceLink": "https://github.com/patternfly/patternfly-react/blob/master/packages/react-core/src/components/Wizard/examples/Wizard.md",
  "section": "components",
  "id": "Wizard",
  "title": "Wizard",
  "toc": [
    "Examples"
  ],
  "cssPrefix": "pf-c-wizard"
};
DocumentationComponentsWizardReactDocs.liveContext = {
  Button,
  Wizard,
  WizardFooter,
  WizardContextConsumer,
  ModalVariant,
  Alert,
  EmptyState,
  EmptyStateIcon,
  EmptyStateBody,
  EmptyStateSecondaryActions,
  Title,
  Progress,
  ExternalLinkAltIcon,
  SlackHashIcon,
  CogsIcon,
  FinishedStep,
  SampleForm
};
DocumentationComponentsWizardReactDocs.Component = () => (
  <React.Fragment>
    <AutoLinkHeader {...{"size":"h2","className":"ws-title ws-h2"}}>
      {`Examples`}
    </AutoLinkHeader>
    <Example {...DocumentationComponentsWizardReactDocs} {...{"code":"import React from 'react';\nimport { Button, Wizard } from '@patternfly/react-core';\n\nclass SimpleWizard extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const steps = [\n      { name: 'First step', component: <p>Step 1 content</p> },\n      { name: 'Second step', component: <p>Step 2 content</p> },\n      { name: 'Third step', component: <p>Step 3 content</p> },\n      { name: 'Fourth step', component: <p>Step 4 content</p> },\n      { name: 'Review', component: <p>Review step content</p>, nextButtonText: 'Finish' }\n    ];\n    const title = 'Basic wizard';\n    return (\n      <Wizard\n        navAriaLabel={`${title} steps`}\n        mainAriaLabel={`${title} content`}\n        steps={steps}\n        height={400}\n      />\n    );\n  }\n}","title":"Basic","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsWizardReactDocs} {...{"code":"import React from 'react';\nimport { Button, Wizard } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon, SlackHashIcon } from '@patternfly/react-icons';\n\nclass WizardWithNavAnchors extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const steps = [\n      {\n        name: <div><ExternalLinkAltIcon /> PF3</div>,\n        component: <p>Step 1: Read about PF3</p>,\n        stepNavItemProps: { navItemComponent: 'a', href: 'https://www.patternfly.org/v3/', target: '_blank' }\n      },\n      {\n        name: <div><ExternalLinkAltIcon /> PF4</div>,\n        component: <p>Step 2: Read about PF4</p>,\n        stepNavItemProps: { navItemComponent: 'a', href: 'https://www.patternfly.org/v4/', target: '_blank' }\n      },\n      {\n        name: <div><SlackHashIcon /> Join us on slack</div>,\n        component: <Button variant=\"link\" component=\"a\" target=\"_blank\" href=\"https://patternfly.slack.com/\">Join the conversation</Button>,\n        stepNavItemProps: { navItemComponent: 'a', href: 'https://patternfly.slack.com/', target: '_blank' }\n      }\n    ];\n    const title = 'Anchor link wizard';\n    return (\n      <Wizard\n        navAriaLabel={`${title} steps`}\n        mainAriaLabel={`${title} content`}\n        steps={steps}\n        height={400}\n      />\n    );\n  }\n}","title":"Anchors for nav items","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsWizardReactDocs} {...{"code":"import React from 'react';\nimport { Button, Wizard } from '@patternfly/react-core';\n\nclass IncrementallyEnabledStepsWizard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      stepIdReached: 1\n    };\n    this.onNext = ({ id }) => {\n      this.setState({\n        stepIdReached: this.state.stepIdReached < id ? id : this.state.stepIdReached\n      });\n    };\n    this.closeWizard = () => {\n      console.log(\"close wizard\");\n    }\n  }\n\n  render() {\n    const { stepIdReached } = this.state;\n\n    const steps = [\n      { id: 1, name: 'First step', component: <p>Step 1 content</p> },\n      { id: 2, name: 'Second step', component: <p>Step 2 content</p>, canJumpTo: stepIdReached >= 2 },\n      { id: 3, name: 'Third step', component: <p>Step 3 content</p>, canJumpTo: stepIdReached >= 3 },\n      { id: 4, name: 'Fourth step', component: <p>Step 4 content</p>, canJumpTo: stepIdReached >= 4 },\n      { id: 5, name: 'Review', component: <p>Review step content</p>, nextButtonText: 'Finish', canJumpTo: stepIdReached >= 5 }\n    ];\n    const title = 'Incrementally enabled wizard';\n    return (\n      <Wizard\n        navAriaLabel={`${title} steps`}\n        mainAriaLabel={`${title} content`}\n        onClose={this.closeWizard}\n        steps={steps}\n        onNext={this.onNext}\n        height={400}\n      />\n    );\n  }\n}","title":"Incrementally enabled steps","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsWizardReactDocs} {...{"code":"import React from 'react';\nimport { Button, Wizard } from '@patternfly/react-core';\nimport FinishedStep from './examples/FinishedStep';\n\nclass FinishedStepWizard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.closeWizard = () => {\n      console.log(\"close wizard\");\n    }\n  }\n\n  render() {\n\n    const steps = [\n      { name: 'First step', component: <p>Step 1 content</p> },\n      { name: 'Second step', component: <p>Step 2 content</p> },\n      { name: 'Third step', component: <p>Step 3 content</p> },\n      { name: 'Fourth step', component: <p>Step 4 content</p> },\n      { name: 'Review', component: <p>Review step content</p>, nextButtonText: 'Finish' },\n      { name: 'Finish', component: <FinishedStep onClose={this.closeWizard} />, isFinishedStep: true }\n    ];\n    const title = 'Finished wizard';\n    return (\n      <Wizard\n        navAriaLabel={`${title} steps`}\n        mainAriaLabel={`${title} content`}\n        onClose={this.closeWizard}\n        steps={steps}\n        height={400}\n      />\n    );\n  }\n}","title":"Finished","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsWizardReactDocs} {...{"code":"import React from 'react';\nimport { Button, Wizard, Form, FormGroup, TextInput } from '@patternfly/react-core';\nimport SampleForm from './examples/SampleForm';\n\nclass ValidationWizard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isFormValid: false,\n      formValue: 'Thirty',\n      allStepsValid: false,\n      stepIdReached: 1\n    };\n\n    this.closeWizard = () => {\n      console.log(\"close wizard\");\n    }\n\n    this.onFormChange = (isValid, value) => {\n      this.setState(\n        {\n          isFormValid: isValid,\n          formValue: value\n        },\n        this.areAllStepsValid\n      );\n    };\n\n    this.areAllStepsValid = () => {\n      this.setState({\n        allStepsValid: this.state.isFormValid\n      });\n    };\n\n    this.onNext = ({ id, name }, { prevId, prevName }) => {\n      console.log(`current id: ${id}, current name: ${name}, previous id: ${prevId}, previous name: ${prevName}`);\n      this.setState({\n        stepIdReached: this.state.stepIdReached < id ? id : this.state.stepIdReached\n      });\n      this.areAllStepsValid();\n    };\n\n    this.onBack = ({ id, name }, { prevId, prevName }) => {\n      console.log(`current id: ${id}, current name: ${name}, previous id: ${prevId}, previous name: ${prevName}`);\n      this.areAllStepsValid();\n    };\n\n    this.onGoToStep = ({ id, name }, { prevId, prevName }) => {\n      console.log(`current id: ${id}, current name: ${name}, previous id: ${prevId}, previous name: ${prevName}`);\n    };\n\n    this.onSave = () => {\n      console.log('Saved and closed the wizard');\n      this.setState({\n        isOpen: false\n      });\n    };\n  }\n\n  render() {\n    const { isFormValid, formValue, allStepsValid, stepIdReached } = this.state;\n\n    const steps = [\n      { id: 1, name: 'Information', component: <p>Step 1 content</p> },\n      {\n        name: 'Configuration',\n        steps: [\n          {\n            id: 2,\n            name: 'Substep A with validation',\n            component: (\n              <SampleForm formValue={formValue} isFormValid={isFormValid} onChange={this.onFormChange} />\n            ),\n            enableNext: isFormValid,\n            canJumpTo: stepIdReached >= 2\n          },\n          { id: 3, name: 'Substep B', component: <p>Substep B</p>, canJumpTo: stepIdReached >= 3 }\n        ]\n      },\n      { id: 4, name: 'Additional', component: <p>Step 3 content</p>, enableNext: allStepsValid, canJumpTo: stepIdReached >= 4 },\n      { id: 5, name: 'Review', component: <p>Step 4 content</p>, nextButtonText: 'Close', canJumpTo: stepIdReached >= 5 }\n    ];\n    const title = 'Enabled on form validation wizard';\n    return (\n      <Wizard\n        navAriaLabel={`${title} steps`}\n        mainAriaLabel={`${title} content`}\n        onClose={this.closeWizard}\n        onSave={this.onSave}\n        steps={steps}\n        onNext={this.onNext}\n        onBack={this.onBack}\n        onGoToStep={this.onGoToStep}\n        height={400}\n      />\n    );\n  }\n}","title":"Enabled on form validation","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsWizardReactDocs} {...{"code":"import React from 'react';\nimport { Button, Wizard, WizardFooter, WizardContextConsumer, Alert } from '@patternfly/react-core';\nimport SampleForm from './examples/SampleForm';\nimport FinishedStep from './examples/FinishedStep';\n\nclass ValidateButtonPressWizard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      stepsValid: 0\n    };\n\n    this.closeWizard = () => {\n      console.log(\"close wizard\");\n    }\n\n    this.validateLastStep = onNext => {\n      const { stepsValid } = this.state;\n      if (stepsValid !== 1) {\n        this.setState({\n          stepsValid: 1\n        });\n      } else {\n        onNext();\n      }\n    };\n  }\n\n  render() {\n    const { stepsValid } = this.state;\n\n    const steps = [\n      { name: 'First step', component: <p>Step 1 content</p> },\n      { name: 'Second step', component: <p>Step 2 content</p> },\n      {\n        name: 'Final Step',\n        component: (\n          <>\n            {stepsValid === 1 && <div style={{padding: '15px 0'}}><Alert variant=\"warning\" title=\"Validation failed, please try again\" /></div>}\n            <SampleForm formValue=\"Validating on button press\" isFormValid={stepsValid !== 1} />\n          </>\n        )\n      },\n      { name: 'Finish', component: <FinishedStep onClose={this.closeWizard} />, isFinishedStep: true }\n    ];\n\n    const CustomFooter = (\n      <WizardFooter>\n        <WizardContextConsumer>\n          {({ activeStep, goToStepByName, goToStepById, onNext, onBack, onClose }) => {\n            if (activeStep.name !== 'Final Step') {\n              return (\n                <>\n                  <Button variant=\"primary\" type=\"submit\" onClick={onNext}>\n                    Forward\n                  </Button>\n                  <Button variant=\"secondary\" onClick={onBack} className={activeStep.name === 'Step 1' ? 'pf-m-disabled' : ''}>\n                    Backward\n                  </Button>\n                  <Button variant=\"link\" onClick={onClose}>\n                    Cancel\n                  </Button>\n                </>\n              )\n            }\n            // Final step buttons\n            return (\n              <>\n                <Button onClick={() => this.validateLastStep(onNext)}>Validate</Button>\n                <Button onClick={() => goToStepByName('Step 1')}>Go to Beginning</Button>\n              </>\n            )}}\n        </WizardContextConsumer>\n      </WizardFooter>\n    );\n    const title = 'Validate on button press wizard';\n    return (\n      <Wizard\n        navAriaLabel={`${title} steps`}\n        mainAriaLabel={`${title} content`}\n        onClose={this.closeWizard}\n        footer={CustomFooter}\n        steps={steps}\n        height={400}\n      />\n    );\n  }\n}","title":"Validate on button press","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsWizardReactDocs} {...{"code":"import React from 'react';\nimport { Button, Radio, Wizard, WizardFooter, WizardContextConsumer, Alert } from '@patternfly/react-core';\nimport SampleForm from './examples/SampleForm';\nimport FinishedStep from './examples/FinishedStep';\n\nclass ProgressiveWizard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showCreateStep: false,\n      showUpdateStep: false,\n      showOptionsStep: false,\n      showReviewStep: false,\n      getStartedStepRadio: 'Create',\n      createStepRadio: 'Quick',\n      updateStepRadio: 'Quick'\n    };\n    this.closeWizard = () => {\n      console.log(\"close wizard\");\n    }\n    this.onGoToStep = ({ id, name }, { prevId, prevName }) => {\n      // Remove steps after the currently clicked step\n      if (name === 'Get Started') {\n        this.setState({\n          showReviewStep: false,\n          showOptionsStep: false,\n          showCreateStep: false,\n          showUpdateStep: false\n        });\n      } else if (name === 'Create Options' || name === 'Update Options') {\n        this.setState({\n          showReviewStep: false,\n          showOptionsStep: false\n        });\n      } else if (name.indexOf('Substep') > -1) {\n        this.setState({\n          showReviewStep: false\n        });\n      }\n    };\n    this.getNextStep = (activeStep, callback) => {\n      if (activeStep.name === 'Get Started') {\n        if (this.state.getStartedStepRadio === 'Create') {\n          this.setState({\n            showCreateStep: true,\n            showUpdateStep: false,\n            showOptionsStep: false,\n            showReviewStep: false\n          }, () => {\n            callback();\n          });\n        } else {\n          this.setState({\n            showCreateStep: false,\n            showUpdateStep: true,\n            showOptionsStep: false,\n            showReviewStep: false\n          }, () => {\n            callback();\n          });\n        }\n      } else if (activeStep.name === 'Create Options' || activeStep.name === 'Update Options') {\n        this.setState({\n          showOptionsStep: true,\n          showReviewStep: false\n        }, () => {\n          callback();\n        });\n      } else if (activeStep.name === 'Substep 3') {\n        this.setState({\n          showReviewStep: true\n        }, () => {\n          callback();\n        });\n      } else {\n        callback();\n      }\n    };\n    this.getPreviousStep = (activeStep, callback) => {\n      if (activeStep.name === 'Review') {\n        this.setState({\n          showReviewStep: false\n        }, () => {\n          callback();\n        });\n      } else if (activeStep.name === 'Substep 1') {\n        this.setState({\n          showOptionsStep: false\n        }, () => {\n          callback();\n        });\n      } else if (activeStep.name === 'Create Options') {\n        this.setState({\n          showCreateStep: false\n        }, () => {\n          callback();\n        });\n      } else if (activeStep.name === 'Update Options') {\n        this.setState({\n          showUpdateStep: false\n        }, () => {\n          callback();\n        });\n      } else {\n        callback();\n      }\n    };\n  }\n\n  render() {\n    const {\n      stepsValid,\n      getStartedStepRadio,\n      createStepRadio,\n      updateStepRadio,\n      showCreateStep,\n      showUpdateStep,\n      showOptionsStep,\n      showReviewStep\n    } = this.state;\n\n    const getStartedStep = {\n      name: 'Get Started',\n      component: (\n        <div>\n          <Radio\n            value=\"Create\"\n            isChecked={getStartedStepRadio === 'Create'}\n            onChange={(_, event) => this.setState({ getStartedStepRadio: event.currentTarget.value })}\n            label=\"Create a new thing\"\n            name=\"radio-step-start\"\n            id=\"radio-step-start-1\"\n          />{' '}\n          <Radio\n            value=\"Update\"\n            isChecked={getStartedStepRadio === 'Update'}\n            onChange={(_, event) => this.setState({ getStartedStepRadio: event.currentTarget.value })}\n            label=\"Update an existing thing\"\n            name=\"radio-step-start\"\n            id=\"radio-step-start-2\"\n          />\n        </div>\n      )\n    };\n\n    const createStep = {\n      name: 'Create Options',\n      component: (\n        <div>\n          <Radio\n            value=\"Quick\"\n            isChecked={createStepRadio === 'Quick'}\n            onChange={(_, event) => this.setState({ createStepRadio: event.currentTarget.value })}\n            label=\"Quick Create\"\n            name=\"radio-step-create\"\n            id=\"radio-step-create-1\"\n          />{' '}\n          <Radio\n            value=\"Custom\"\n            isChecked={createStepRadio === 'Custom'}\n            onChange={(_, event) => this.setState({ createStepRadio: event.currentTarget.value })}\n            label=\"Custom Create\"\n            name=\"radio-step-create\"\n            id=\"radio-step-create-2\"\n          />\n        </div>\n      )\n    };\n\n    const updateStep = {\n      name: 'Update Options',\n      component: (\n        <div>\n          <Radio\n            value=\"Quick\"\n            isChecked={updateStepRadio === 'Quick'}\n            onChange={(_, event) => this.setState({ updateStepRadio: event.currentTarget.value })}\n            label=\"Quick Update\"\n            name=\"radio-step-update\"\n            id=\"radio-step-update-1\"\n          />{' '}\n          <Radio\n            value=\"Custom\"\n            isChecked={updateStepRadio === 'Custom'}\n            onChange={(_, event) => this.setState({ updateStepRadio: event.currentTarget.value })}\n            label=\"Custom Update\"\n            name=\"radio-step-update\"\n            id=\"radio-step-update-2\"\n          />\n        </div>\n      )\n    };\n\n    const optionsStep = {\n      name: showCreateStep ? `${createStepRadio} Options` : `${updateStepRadio} Options`,\n      steps: [\n        {\n          name: 'Substep 1',\n          component: 'Substep 1'\n        },\n        {\n          name: 'Substep 2',\n          component: 'Substep 2'\n        },\n        {\n          name: 'Substep 3',\n          component: 'Substep 3'\n        }\n      ]\n    };\n\n    const reviewStep = {\n      name: 'Review',\n      component: (\n        <div>\n          <div>First choice: {getStartedStepRadio}</div>\n          <div>Second choice: {showCreateStep ? createStepRadio : updateStepRadio}</div>\n        </div>\n      )\n    };\n\n    const steps = [\n      getStartedStep,\n      ...(showCreateStep ? [createStep] : []),\n      ...(showUpdateStep ? [updateStep] : []),\n      ...(showOptionsStep ? [optionsStep] : []),\n      ...(showReviewStep ? [reviewStep] : []),\n    ];\n\n    const CustomFooter = (\n      <WizardFooter>\n        <WizardContextConsumer>\n          {({ activeStep, goToStepByName, goToStepById, onNext, onBack, onClose }) => {\n            return (\n              <>\n                <Button variant=\"primary\" type=\"submit\" onClick={() => this.getNextStep(activeStep, onNext)}>\n                  {activeStep.name === 'Review' ? 'Finish' : 'Next'}\n                </Button>\n                <Button variant=\"secondary\" onClick={() => this.getPreviousStep(activeStep, onBack)} className={activeStep.name === 'Get Started' ? 'pf-m-disabled' : ''}>\n                  Back\n                </Button>\n                <Button variant=\"link\" onClick={onClose}>\n                  Cancel\n                </Button>\n              </>\n            )}}\n        </WizardContextConsumer>\n      </WizardFooter>\n    );\n    const title = 'Progressive wizard';\n    return (\n      <Wizard\n        navAriaLabel={`${title} steps`}\n        mainAriaLabel={`${title} content`}\n        onClose={this.closeWizard}\n        footer={CustomFooter}\n        onGoToStep={this.onGoToStep}\n        steps={steps}\n        height={400}\n      />\n    );\n  }\n}","title":"Progressive steps","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsWizardReactDocs} {...{"code":"import React from 'react';\nimport { Button, Wizard } from '@patternfly/react-core';\n\nclass RememberLastStepWizard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      step: 1\n    };\n    this.closeWizard = () => {\n      console.log(\"close wizard\");\n    }\n    this.onMove = (curr, prev) => {\n      this.setState({\n        step: curr.id\n      });\n    }\n    this.onSave = () => {\n      this.setState({\n        step: 1,\n      })\n    }\n  }\n\n  render() {\n    const { step } = this.state;\n\n    const steps = [\n      { id: 1, name: 'First step', component: <p>Step 1 content</p> },\n      { id: 2, name: 'Second step', component: <p>Step 2 content</p> },\n      { id: 3, name: 'Third step', component: <p>Step 3 content</p> },\n      { id: 4, name: 'Fourth step', component: <p>Step 4 content</p> },\n      { id: 5, name: 'Review', component: <p>Review step content</p>, nextButtonText: 'Finish' }\n    ];\n    const title = 'Remember last step wizard';\n    return (\n      <Wizard\n        navAriaLabel={`${title} steps`}\n        mainAriaLabel={`${title} content`}\n        startAtStep={step}\n        onNext={this.onMove}\n        onBack={this.onMove}\n        onSave={this.onSave}\n        onClose={this.closeWizard}\n        description=\"Simple Wizard Description\"\n        steps={steps}\n        height={400}\n      />\n    );\n  }\n}","title":"Remember last step","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsWizardReactDocs} {...{"code":"import React from 'react';\nimport { Button, Wizard } from '@patternfly/react-core';\n\nclass WizardInModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false\n    };\n    this.handleModalToggle = () => {\n      this.setState(({ isOpen }) => ({\n        isOpen: !isOpen\n      }));\n    };\n  }\n\n  render() {\n    const { isOpen } = this.state;\n\n    const steps = [\n      { name: 'First step', component: <p>Step 1 content</p> },\n      { name: 'Second step', component: <p>Step 2 content</p> },\n      { name: 'Third step', component: <p>Step 3 content</p> },\n      { name: 'Fourth step', component: <p>Step 4 content</p> },\n      { name: 'Review', component: <p>Review step content</p>, nextButtonText: 'Finish' }\n    ];\n    const title = 'Wizard in modal';\n    return (\n      <React.Fragment>\n        <Button variant=\"primary\" onClick={this.handleModalToggle}>\n          Show Modal\n        </Button>\n        <Wizard\n          title={title}\n          description=\"Simple Wizard Description\"\n          steps={steps}\n          onClose={this.handleModalToggle}\n          isOpen={isOpen}\n        />\n      </React.Fragment>\n    );\n  }\n}","title":"Wizard in modal","lang":"js"}}>
    </Example>
  </React.Fragment>
);
DocumentationComponentsWizardReactDocs.Component.displayName = 'DocumentationComponentsWizardReactDocs';
