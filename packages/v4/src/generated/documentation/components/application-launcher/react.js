import React from 'react';
import { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';
import { HelpIcon, StarIcon } from '@patternfly/react-icons';
import { Link } from '@reach/router';
import pfIcon from '../../../../../../../node_modules/@patternfly/react-core/src/components/ApplicationLauncher/examples/./pf-logo-small.svg';

export const DocumentationComponentsApplicationLauncherReactDocs = {
  "slug": "/documentation/components/application-launcher/react",
  "source": "react",
  "propComponents": [
    "ApplicationLauncher",
    "ApplicationLauncherItem"
  ],
  "sourceLink": "https://github.com/patternfly/patternfly-react/blob/master/packages/react-core/src/components/ApplicationLauncher/examples/ApplicationLauncher.md",
  "section": "components",
  "id": "Application launcher",
  "title": "Application launcher",
  "toc": [
    "Examples"
  ],
  "cssPrefix": "pf-c-app-launcher"
};
DocumentationComponentsApplicationLauncherReactDocs.liveContext = {
  HelpIcon,
  StarIcon,
  Link,
  pfIcon
};
DocumentationComponentsApplicationLauncherReactDocs.Component = () => (
  <React.Fragment>
    <p {...{"className":"ws-p"}}>
      {`Note: Application launcher is built on Dropdown, for extended API go to `}
      <PatternflyThemeLink {...{"to":"/documentation/react/components/dropdown"}}>
        {`Dropdown`}
      </PatternflyThemeLink>
      {` documentation.
To add a tooltip, use the `}
      <code {...{"className":"ws-code"}}>
        {`tooltip`}
      </code>
      {` prop and optionally add more tooltip props by using `}
      <code {...{"className":"ws-code"}}>
        {`tooltipProps`}
      </code>
      {`. For more tooltip information go to `}
      <PatternflyThemeLink {...{"to":"/documentation/react/components/tooltip"}}>
        {`Tooltip`}
      </PatternflyThemeLink>
      {`.`}
    </p>
    <AutoLinkHeader {...{"size":"h2","className":"ws-title ws-h2"}}>
      {`Examples`}
    </AutoLinkHeader>
    <Example {...DocumentationComponentsApplicationLauncherReactDocs} {...{"code":"import React from 'react';\nimport { ApplicationLauncher, ApplicationLauncherItem } from '@patternfly/react-core';\n\nclass SimpleApplicationLauncher extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false\n    };\n    this.onToggle = isOpen => {\n      this.setState({\n        isOpen\n      });\n    };\n    this.onSelect = event => {\n      this.setState({\n        isOpen: !this.state.isOpen\n      });\n    };\n  }\n\n  render() {\n    const { isOpen } = this.state;\n    const appLauncherItems = [\n      <ApplicationLauncherItem key=\"application_1a\" href=\"#\">\n        Application 1 (anchor link)\n      </ApplicationLauncherItem>,\n      <ApplicationLauncherItem key=\"application_2a\" component=\"button\" onClick={() => alert('Clicked item 2')}>\n        Application 2 (button with onClick)\n      </ApplicationLauncherItem>,\n      <ApplicationLauncherItem key=\"disabled_application_4a\" isDisabled>\n        Unavailable Application\n      </ApplicationLauncherItem>\n    ];\n    return (\n      <ApplicationLauncher onSelect={this.onSelect} onToggle={this.onToggle} isOpen={isOpen} items={appLauncherItems} />\n    );\n  }\n}","title":"Basic","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsApplicationLauncherReactDocs} {...{"code":"import React from 'react';\nimport { Link } from '@reach/router';\nimport { ApplicationLauncher, ApplicationLauncherItem, ApplicationLauncherContent, Text } from '@patternfly/react-core';\n\nclass SimpleApplicationLauncher extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false\n    };\n    this.onToggle = isOpen => {\n      this.setState({\n        isOpen\n      });\n    };\n    this.onSelect = event => {\n      this.setState({\n        isOpen: !this.state.isOpen\n      });\n    };\n  }\n\n  render() {\n    const { isOpen } = this.state;\n    const icon = <img src={pfIcon} />;\n    const exampleStyle = {\n      color: 'var(--pf-c-app-launcher__menu-item--Color)',\n      textDecoration: 'none'\n    };\n    const appLauncherItems = [\n      <ApplicationLauncherItem\n        key=\"router1\"\n        component={\n          <Link to=\"/\" style={exampleStyle}>\n            @reach/router Link\n          </Link>\n        }\n      />,\n      <ApplicationLauncherItem\n        key=\"router2\"\n        isExternal\n        icon={icon}\n        component={\n          <Link to=\"/\" style={exampleStyle}>\n            <ApplicationLauncherContent>@reach/router Link with icon</ApplicationLauncherContent>\n          </Link>\n        }\n      />,\n      <ApplicationLauncherItem key=\"application_1a\" href=\"#\">\n        Application 1 (anchor link)\n      </ApplicationLauncherItem>,\n      <ApplicationLauncherItem key=\"application_2a\" component=\"button\" onClick={() => alert('Clicked item 2')}>\n        Application 2 (button with onClick)\n      </ApplicationLauncherItem>,\n      <ApplicationLauncherItem key=\"disabled_application_4a\" isDisabled>\n        Unavailable Application\n      </ApplicationLauncherItem>\n    ];\n    return (\n      <ApplicationLauncher onSelect={this.onSelect} onToggle={this.onToggle} isOpen={isOpen} items={appLauncherItems} />\n    );\n  }\n}","title":"Router link","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsApplicationLauncherReactDocs} {...{"code":"import React from 'react';\nimport { ApplicationLauncher, ApplicationLauncherItem } from '@patternfly/react-core';\n\nclass SimpleApplicationLauncher extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false\n    };\n    this.onToggle = isOpen => {\n      this.setState({\n        isOpen\n      });\n    };\n    this.onSelect = event => {\n      this.setState({\n        isOpen: !this.state.isOpen\n      });\n    };\n  }\n\n  render() {\n    const { isOpen } = this.state;\n    const appLauncherItems = [\n      <ApplicationLauncherItem key=\"application_1a\" href=\"#\">\n        Application 1 (anchor link)\n      </ApplicationLauncherItem>,\n      <ApplicationLauncherItem key=\"application_2a\" component=\"button\" onClick={() => alert('Clicked item 2')}>\n        Application 2 (button with onClick)\n      </ApplicationLauncherItem>,\n      <ApplicationLauncherItem key=\"disabled_application_4a\" isDisabled>\n        Unavailable Application\n      </ApplicationLauncherItem>\n    ];\n    return (\n      <ApplicationLauncher\n        onSelect={this.onSelect}\n        onToggle={this.onToggle}\n        isOpen={isOpen}\n        items={appLauncherItems}\n        isDisabled\n      />\n    );\n  }\n}","title":"Disabled","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsApplicationLauncherReactDocs} {...{"code":"import React from 'react';\nimport { ApplicationLauncher, ApplicationLauncherItem } from '@patternfly/react-core';\nimport { DropdownPosition } from '../Dropdown';\n\nclass SimpleApplicationLauncher extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false\n    };\n    this.onToggle = isOpen => {\n      this.setState({\n        isOpen\n      });\n    };\n    this.onSelect = event => {\n      this.setState({\n        isOpen: !this.state.isOpen\n      });\n    };\n  }\n\n  render() {\n    const { isOpen } = this.state;\n    const appLauncherItems = [\n      <ApplicationLauncherItem key=\"application_1a\" href=\"#\">\n        Application 1 (anchor link)\n      </ApplicationLauncherItem>,\n      <ApplicationLauncherItem key=\"application_2a\" component=\"button\" onClick={() => alert('Clicked item 2')}>\n        Application 2 (button with onClick)\n      </ApplicationLauncherItem>,\n      <ApplicationLauncherItem key=\"disabled_application_4a\" isDisabled>\n        Unavailable Application\n      </ApplicationLauncherItem>\n    ];\n    const style = { marginLeft: 'calc(100% - 46px)' };\n    return (\n      <ApplicationLauncher\n        onSelect={this.onSelect}\n        onToggle={this.onToggle}\n        isOpen={isOpen}\n        items={appLauncherItems}\n        position={DropdownPosition.right}\n        style={style}\n      />\n    );\n  }\n}","title":"Aligned right","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsApplicationLauncherReactDocs} {...{"code":"import React from 'react';\nimport { ApplicationLauncher, ApplicationLauncherItem } from '@patternfly/react-core';\nimport { DropdownDirection } from '../Dropdown';\n\nclass SimpleApplicationLauncher extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false\n    };\n    this.onToggle = isOpen => {\n      this.setState({\n        isOpen\n      });\n    };\n    this.onSelect = event => {\n      this.setState({\n        isOpen: !this.state.isOpen\n      });\n    };\n  }\n\n  render() {\n    const { isOpen } = this.state;\n    const appLauncherItems = [\n      <ApplicationLauncherItem key=\"application_1a\" href=\"#\">\n        Application 1 (anchor link)\n      </ApplicationLauncherItem>,\n      <ApplicationLauncherItem key=\"application_2a\" component=\"button\" onClick={() => alert('Clicked item 2')}>\n        Application 2 (button with onClick)\n      </ApplicationLauncherItem>,\n      <ApplicationLauncherItem key=\"disabled_application_4a\" isDisabled>\n        Unavailable Application\n      </ApplicationLauncherItem>\n    ];\n    return (\n      <ApplicationLauncher\n        onSelect={this.onSelect}\n        onToggle={this.onToggle}\n        isOpen={isOpen}\n        items={appLauncherItems}\n        direction={DropdownDirection.up}\n      />\n    );\n  }\n}","title":"Aligned top","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsApplicationLauncherReactDocs} {...{"code":"import React from 'react';\nimport { ApplicationLauncher, ApplicationLauncherItem } from '@patternfly/react-core';\n\nclass TooltipApplicationLauncher extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false\n    };\n    this.onToggle = isOpen => {\n      this.setState({\n        isOpen\n      });\n    };\n    this.onSelect = event => {\n      this.setState({\n        isOpen: !this.state.isOpen\n      });\n    };\n  }\n\n  render() {\n    const { isOpen } = this.state;\n    const appLauncherItems = [\n      <ApplicationLauncherItem key=\"application_1b\" href=\"#\" tooltip={<div>Launch Application 1</div>}>\n        Application 1 (anchor link)\n      </ApplicationLauncherItem>,\n      <ApplicationLauncherItem\n        key=\"application_2b\"\n        component=\"button\"\n        tooltip={<div>Launch Application 2</div>}\n        tooltipProps={{ position: 'right' }}\n        onClick={() => alert('Clicked item 2')}\n      >\n        Application 2 (onClick)\n      </ApplicationLauncherItem>,\n      <ApplicationLauncherItem\n        key=\"application_3b\"\n        component=\"button\"\n        tooltip={<div>Launch Application 3</div>}\n        tooltipProps={{ position: 'bottom' }}\n        onClick={() => alert('Clicked item 3')}\n      >\n        Application 3 (onClick)\n      </ApplicationLauncherItem>\n    ];\n    return (\n      <ApplicationLauncher onSelect={this.onSelect} onToggle={this.onToggle} isOpen={isOpen} items={appLauncherItems} />\n    );\n  }\n}","title":"With tooltip","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsApplicationLauncherReactDocs} {...{"code":"import React from 'react';\nimport {\n  ApplicationLauncher,\n  ApplicationLauncherIcon,\n  ApplicationLauncherText,\n  ApplicationLauncherItem,\n  ApplicationLauncherGroup,\n  ApplicationLauncherSeparator\n} from '@patternfly/react-core';\nimport pfIcon from './examples/pf-logo-small.svg';\n\nclass ApplicationLauncherSections extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false\n    };\n    this.onToggle = isOpen => {\n      this.setState({\n        isOpen\n      });\n    };\n    this.onSelect = event => {\n      this.setState({\n        isOpen: !this.state.isOpen\n      });\n    };\n  }\n\n  render() {\n    const { isOpen } = this.state;\n    const icon = <img src={pfIcon} />;\n    const appLauncherItems = [\n      <ApplicationLauncherGroup key=\"group 1c\">\n        <ApplicationLauncherItem key=\"group 1a\" icon={icon}>\n          Item without group title\n        </ApplicationLauncherItem>\n        <ApplicationLauncherSeparator key=\"separator\" />\n      </ApplicationLauncherGroup>,\n      <ApplicationLauncherGroup label=\"Group 2\" key=\"group 2c\">\n        <ApplicationLauncherItem key=\"group 2a\" isExternal icon={icon} component=\"button\">\n          Group 2 button\n        </ApplicationLauncherItem>\n        <ApplicationLauncherItem key=\"group 2b\" isExternal href=\"#\" icon={icon}>\n          Group 2 anchor link\n        </ApplicationLauncherItem>\n        <ApplicationLauncherSeparator key=\"separator\" />\n      </ApplicationLauncherGroup>,\n      <ApplicationLauncherGroup label=\"Group 3\" key=\"group 3c\">\n        <ApplicationLauncherItem key=\"group 3a\" isExternal icon={icon} component=\"button\">\n          Group 3 button\n        </ApplicationLauncherItem>\n        <ApplicationLauncherItem key=\"group 3b\" isExternal href=\"#\" icon={icon}>\n          Group 3 anchor link\n        </ApplicationLauncherItem>\n      </ApplicationLauncherGroup>\n    ];\n    return (\n      <ApplicationLauncher\n        onSelect={this.onSelect}\n        onToggle={this.onToggle}\n        isOpen={isOpen}\n        items={appLauncherItems}\n        isGrouped\n      />\n    );\n  }\n}","title":"With sections and icons","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsApplicationLauncherReactDocs} {...{"code":"import React from 'react';\nimport {\n  ApplicationLauncher,\n  ApplicationLauncherItem,\n  ApplicationLauncherGroup,\n  ApplicationLauncherSeparator\n} from '@patternfly/react-core';\nimport pfIcon from './examples/pf-logo-small.svg';\n\nclass ApplicationLauncherFavorites extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false,\n      favorites: [],\n      filteredItems: null\n    };\n\n    const icon = <img src={pfIcon} />;\n    this.appLauncherItems = [\n      <ApplicationLauncherGroup key=\"group 1c\">\n        <ApplicationLauncherItem key=\"group 1a\" id=\"item-1\" icon={icon}>\n          Item without group title\n        </ApplicationLauncherItem>\n        <ApplicationLauncherSeparator key=\"separator\" />\n      </ApplicationLauncherGroup>,\n      <ApplicationLauncherGroup label=\"Group 2\" key=\"group 2c\">\n        <ApplicationLauncherItem key=\"group 2a\" id=\"item-2\" isExternal icon={icon} component=\"button\">\n          Group 2 button\n        </ApplicationLauncherItem>\n        <ApplicationLauncherItem key=\"group 2b\" id=\"item-3\" isExternal href=\"#\" icon={icon}>\n          Group 2 anchor link\n        </ApplicationLauncherItem>\n        <ApplicationLauncherSeparator key=\"separator\" />\n      </ApplicationLauncherGroup>,\n      <ApplicationLauncherGroup label=\"Group 3\" key=\"group 3c\">\n        <ApplicationLauncherItem key=\"group 3a\" id=\"item-4\" isExternal icon={icon} component=\"button\">\n          Group 3 button\n        </ApplicationLauncherItem>\n        <ApplicationLauncherItem key=\"group 3b\" id=\"item-5\" isExternal href=\"#\" icon={icon}>\n          Group 3 anchor link\n        </ApplicationLauncherItem>\n      </ApplicationLauncherGroup>\n    ];\n\n    this.onToggle = isOpen => {\n      this.setState({\n        isOpen\n      });\n    };\n    this.onSelect = event => {\n      this.setState({\n        isOpen: !this.state.isOpen\n      });\n    };\n    this.onFavorite = (itemId, isFavorite) => {\n      if (isFavorite) {\n        this.setState({\n          favorites: this.state.favorites.filter(id => id !== itemId)\n        });\n      } else\n        this.setState({\n          favorites: [...this.state.favorites, itemId]\n        });\n    };\n    this.onSearch = textInput => {\n      if (textInput === '') {\n        this.setState({\n          filteredItems: null\n        });\n      } else {\n        let filteredGroups = this.appLauncherItems\n          .map(group => {\n            let filteredGroup = React.cloneElement(group, {\n              children: group.props.children.filter(item => {\n                if (item.type === ApplicationLauncherSeparator) return item;\n                return item.props.children.toLowerCase().includes(textInput.toLowerCase());\n              })\n            });\n            if (\n              filteredGroup.props.children.length > 0 &&\n              filteredGroup.props.children[0].type !== ApplicationLauncherSeparator\n            )\n              return filteredGroup;\n          })\n          .filter(newGroup => newGroup);\n\n        if (filteredGroups.length > 0) {\n          let lastGroup = filteredGroups.pop();\n          lastGroup = React.cloneElement(lastGroup, {\n            children: lastGroup.props.children.filter(item => item.type !== ApplicationLauncherSeparator)\n          });\n          filteredGroups.push(lastGroup);\n        }\n\n        this.setState({\n          filteredItems: filteredGroups\n        });\n      }\n    };\n  }\n\n  render() {\n    const { isOpen, favorites, filteredItems } = this.state;\n    return (\n      <ApplicationLauncher\n        onToggle={this.onToggle}\n        onFavorite={this.onFavorite}\n        onSearch={this.onSearch}\n        isOpen={isOpen}\n        items={filteredItems || this.appLauncherItems}\n        favorites={favorites}\n        isGrouped\n      />\n    );\n  }\n}","title":"With favorites and search","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsApplicationLauncherReactDocs} {...{"code":"import React from 'react';\nimport { ApplicationLauncher, ApplicationLauncherItem } from '@patternfly/react-core';\nimport { HelpIcon } from '@patternfly/react-icons';\n\nclass ApplicationLauncheIcon extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false\n    };\n    this.onToggle = isOpen => {\n      this.setState({\n        isOpen\n      });\n    };\n    this.onSelect = event => {\n      this.setState({\n        isOpen: !this.state.isOpen\n      });\n    };\n  }\n\n  render() {\n    const { isOpen } = this.state;\n    const appLauncherItems = [\n      <ApplicationLauncherItem key=\"application_1a\" href=\"#\">\n        Application 1 (anchor link)\n      </ApplicationLauncherItem>,\n      <ApplicationLauncherItem key=\"application_2a\" component=\"button\" onClick={() => alert('Clicked item 2')}>\n        Application 2 (button with onClick)\n      </ApplicationLauncherItem>,\n      <ApplicationLauncherItem key=\"disabled_application_4a\" isDisabled>\n        Unavailable Application\n      </ApplicationLauncherItem>\n    ];\n    return (\n      <ApplicationLauncher\n        onSelect={this.onSelect}\n        onToggle={this.onToggle}\n        isOpen={isOpen}\n        items={appLauncherItems}\n        toggleIcon={<HelpIcon />}\n      />\n    );\n  }\n}","title":"With custom icon","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsApplicationLauncherReactDocs} {...{"code":"import React from 'react';\nimport { ApplicationLauncher, ApplicationLauncherItem } from '@patternfly/react-core';\n\nclass ApplicationLauncherDocumentBody extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false\n    };\n    this.onToggle = isOpen => {\n      this.setState({\n        isOpen\n      });\n    };\n    this.onSelect = event => {\n      this.setState({\n        isOpen: !this.state.isOpen\n      });\n    };\n  }\n\n  render() {\n    const { isOpen } = this.state;\n    const appLauncherItems = [\n      <ApplicationLauncherItem key=\"application_1a\" href=\"#\">\n        Application 1 (anchor link)\n      </ApplicationLauncherItem>,\n      <ApplicationLauncherItem key=\"application_2a\" component=\"button\" onClick={() => alert('Clicked item 2')}>\n        Application 2 (button with onClick)\n      </ApplicationLauncherItem>,\n      <ApplicationLauncherItem key=\"disabled_application_4a\" isDisabled>\n        Unavailable Application\n      </ApplicationLauncherItem>\n    ];\n    return (\n      <ApplicationLauncher \n        menuAppendTo={() => document.body} \n        onSelect={this.onSelect} \n        onToggle={this.onToggle} \n        isOpen={isOpen} \n        items={appLauncherItems}\n      />\n    );\n  }\n}","title":"Basic with menu appended to document body","lang":"js"}}>
    </Example>
  </React.Fragment>
);
DocumentationComponentsApplicationLauncherReactDocs.Component.displayName = 'DocumentationComponentsApplicationLauncherReactDocs';
