import React from 'react';
import { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';
import { WarningTriangleIcon, ThIcon, CaretDownIcon } from '@patternfly/react-icons';

export const DocumentationComponentsModalReactDocs = {
  "slug": "/documentation/components/modal/react",
  "source": "react",
  "propComponents": [
    "Modal",
    "ModalBox",
    "ModalBoxBody",
    "ModalBoxCloseButton",
    "ModalBoxFooter",
    "ModalContent"
  ],
  "sourceLink": "https://github.com/patternfly/patternfly-react/blob/master/packages/react-core/src/components/Modal/examples/Modal.md",
  "section": "components",
  "id": "Modal",
  "title": "Modal",
  "toc": [
    "Examples"
  ],
  "cssPrefix": "pf-c-modal-box"
};
DocumentationComponentsModalReactDocs.liveContext = {
  WarningTriangleIcon,
  ThIcon,
  CaretDownIcon
};
DocumentationComponentsModalReactDocs.Component = () => (
  <React.Fragment>
    <AutoLinkHeader {...{"size":"h2","className":"ws-title ws-h2"}}>
      {`Examples`}
    </AutoLinkHeader>
    <Example {...DocumentationComponentsModalReactDocs} {...{"code":"import React from 'react';\nimport { Modal, Button } from '@patternfly/react-core';\n\nclass SimpleModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isModalOpen: false\n    };\n    this.handleModalToggle = () => {\n      this.setState(({ isModalOpen }) => ({\n        isModalOpen: !isModalOpen\n      }));\n    };\n  }\n\n  render() {\n    const { isModalOpen } = this.state;\n\n    return (\n      <React.Fragment>\n        <Button variant=\"primary\" onClick={this.handleModalToggle}>\n          Show Modal\n        </Button>\n        <Modal\n          title=\"Simple modal header\"\n          isOpen={isModalOpen}\n          onClose={this.handleModalToggle}\n          actions={[\n            <Button key=\"confirm\" variant=\"primary\" onClick={this.handleModalToggle}>\n              Confirm\n            </Button>,\n            <Button key=\"cancel\" variant=\"link\" onClick={this.handleModalToggle}>\n              Cancel\n            </Button>\n          ]}\n        >\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n          magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n          consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n          pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id\n          est laborum.\n        </Modal>\n      </React.Fragment>\n    );\n  }\n}","title":"Basic","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsModalReactDocs} {...{"code":"import React from 'react';\nimport { Modal, Button } from '@patternfly/react-core';\n\nclass SimpleModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isModalOpen: false\n    };\n    this.handleModalToggle = () => {\n      this.setState(({ isModalOpen }) => ({\n        isModalOpen: !isModalOpen\n      }));\n    };\n  }\n\n  render() {\n    const { isModalOpen } = this.state;\n\n    return (\n      <React.Fragment>\n        <Button variant=\"primary\" onClick={this.handleModalToggle}>\n          Show Modal\n        </Button>\n        <Modal\n          aria-label=\"My modal context\"\n          title=\"Modal header with description\"\n          isOpen={isModalOpen}\n          onClose={this.handleModalToggle}\n          description=\"A description is used when you want to provide more info about the modal than the title is able to describe. The content in the description is static and will not scroll with the rest of the modal body.\"\n          actions={[\n            <Button key=\"confirm\" variant=\"primary\" onClick={this.handleModalToggle}>\n              Confirm\n            </Button>,\n            <Button key=\"cancel\" variant=\"link\" onClick={this.handleModalToggle}>\n              Cancel\n            </Button>\n          ]}\n        >\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n          magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n          consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n          pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id\n          est laborum.\n        </Modal>\n      </React.Fragment>\n    );\n  }\n}","title":"With description","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsModalReactDocs} {...{"code":"import React from 'react';\nimport { Modal, ModalVariant, Button } from '@patternfly/react-core';\n\nclass SmallModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isModalOpen: false\n    };\n    this.handleModalToggle = () => {\n      this.setState(({ isModalOpen }) => ({\n        isModalOpen: !isModalOpen\n      }));\n    };\n  }\n\n  render() {\n    const { isModalOpen } = this.state;\n\n    return (\n      <React.Fragment>\n        <Button variant=\"primary\" onClick={this.handleModalToggle}>\n          Show Small Modal\n        </Button>\n        <Modal\n          variant={ModalVariant.small}\n          title=\"Small modal header\"\n          isOpen={isModalOpen}\n          onClose={this.handleModalToggle}\n          actions={[\n            <Button key=\"confirm\" variant=\"primary\" onClick={this.handleModalToggle}>\n              Confirm\n            </Button>,\n            <Button key=\"cancel\" variant=\"link\" onClick={this.handleModalToggle}>\n              Cancel\n            </Button>\n          ]}\n        >\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n          magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n          consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n          pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id\n          est laborum.\n        </Modal>\n      </React.Fragment>\n    );\n  }\n}","title":"Small","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsModalReactDocs} {...{"code":"import React from 'react';\nimport { Modal, ModalVariant, Button } from '@patternfly/react-core';\n\nclass LargeModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isModalOpen: false\n    };\n    this.handleModalToggle = () => {\n      this.setState(({ isModalOpen }) => ({\n        isModalOpen: !isModalOpen\n      }));\n    };\n  }\n\n  render() {\n    const { isModalOpen } = this.state;\n\n    return (\n      <React.Fragment>\n        <Button variant=\"primary\" onClick={this.handleModalToggle}>\n          Show Large Modal\n        </Button>\n        <Modal\n          variant={ModalVariant.large}\n          title=\"Large modal header\"\n          isOpen={isModalOpen}\n          onClose={this.handleModalToggle}\n          actions={[\n            <Button key=\"confirm\" variant=\"primary\" onClick={this.handleModalToggle}>\n              Confirm\n            </Button>,\n            <Button key=\"cancel\" variant=\"link\" onClick={this.handleModalToggle}>\n              Cancel\n            </Button>\n          ]}\n        >\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n          magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n          consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n          pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id\n          est laborum.\n        </Modal>\n      </React.Fragment>\n    );\n  }\n}","title":"Large","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsModalReactDocs} {...{"code":"import React from 'react';\nimport { Modal, Button } from '@patternfly/react-core';\n\nclass WidthModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isModalOpen: false\n    };\n    this.handleModalToggle = () => {\n      this.setState(({ isModalOpen }) => ({\n        isModalOpen: !isModalOpen\n      }));\n    };\n  }\n\n  render() {\n    const { isModalOpen } = this.state;\n\n    return (\n      <React.Fragment>\n        <Button variant=\"primary\" onClick={this.handleModalToggle}>\n          Show 50% Width Modal\n        </Button>\n        <Modal\n          width={'50%'}\n          title=\"Modal header for set width example\"\n          isOpen={isModalOpen}\n          onClose={this.handleModalToggle}\n          actions={[\n            <Button key=\"confirm\" variant=\"primary\" onClick={this.handleModalToggle}>\n              Confirm\n            </Button>,\n            <Button key=\"cancel\" variant=\"link\" onClick={this.handleModalToggle}>\n              Cancel\n            </Button>\n          ]}\n        >\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n          magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n          consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n          pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id\n          est laborum.\n        </Modal>\n      </React.Fragment>\n    );\n  }\n}","title":"Width","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsModalReactDocs} {...{"code":"import React from 'react';\nimport { Modal, ModalVariant, Button, Title, TitleSizes } from '@patternfly/react-core';\nimport { WarningTriangleIcon } from '@patternfly/react-icons';\n\nclass CustomHeaderFooter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isModalOpen: false\n    };\n    this.handleModalToggle = () => {\n      this.setState(({ isModalOpen }) => ({\n        isModalOpen: !isModalOpen\n      }));\n    };\n  }\n\n  render() {\n    const { isModalOpen } = this.state;\n\n    const header = (\n      <React.Fragment>\n        <Title id=\"custom-header-label\" headingLevel=\"h1\" size={TitleSizes['2xl']}>\n          With custom modal header/footer\n        </Title>\n        <p className=\"pf-u-pt-sm\">Allows for custom content in the header and/or footer by passing components.</p>\n      </React.Fragment>\n    );\n\n    const footer = (\n      <Title headingLevel=\"h4\" size={TitleSizes.md}>\n        <WarningTriangleIcon />\n        <span className=\"pf-u-pl-sm\">Custom modal footer.</span>\n      </Title>\n    );\n\n    return (\n      <React.Fragment>\n        <Button variant=\"primary\" onClick={this.handleModalToggle}>\n          Show Custom Header/Footer Modal\n        </Button>\n        <Modal\n          variant={ModalVariant.large}\n          isOpen={isModalOpen}\n          header={header}\n          aria-label=\"My dialog\"\n          aria-labelledby=\"custom-header-label\"\n          aria-describedby=\"custom-header-description\"\n          onClose={this.handleModalToggle}\n          footer={footer}\n        >\n          <span id=\"custom-header-description\">\n            When static text describing the modal is available, it can be wrapped with an ID referring to the modal's\n            aria-describedby value.\n          </span>\n          <br />\n          <br />\n          Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis\n          aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint\n          occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        </Modal>\n      </React.Fragment>\n    );\n  }\n}","title":"Custom header and footer","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsModalReactDocs} {...{"code":"import React from 'react';\nimport { Modal, ModalVariant, Button } from '@patternfly/react-core';\n\nclass NoHeader extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isModalOpen: false\n    };\n    this.handleModalToggle = () => {\n      this.setState(({ isModalOpen }) => ({\n        isModalOpen: !isModalOpen\n      }));\n    };\n  }\n\n  render() {\n    const { isModalOpen } = this.state;\n    const footer = <React.Fragment>Modal Footer</React.Fragment>;\n\n    return (\n      <React.Fragment>\n        <Button variant=\"primary\" onClick={this.handleModalToggle}>\n          Show No Header Modal\n        </Button>\n        <Modal\n          variant={ModalVariant.large}\n          isOpen={isModalOpen}\n          aria-label=\"No header example\"\n          showClose={true}\n          aria-describedby=\"no-header-example\"\n          onClose={this.handleModalToggle}\n          footer={footer}\n        >\n          <span id=\"no-header-example\">\n            When static text describing the modal is available, it can be wrapped with an ID referring to the modal's\n            aria-describedby value.\n          </span>\n          <br />\n          <br />\n          Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis\n          aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint\n          occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        </Modal>\n      </React.Fragment>\n    );\n  }\n}","title":"No header","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsModalReactDocs} {...{"code":"import React from 'react';\nimport { Modal, Button, Wizard } from '@patternfly/react-core';\n\nclass WithWizard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isModalOpen: false\n    };\n    this.handleModalToggle = () => {\n      this.setState(({ isModalOpen }) => ({\n        isModalOpen: !isModalOpen\n      }));\n    };\n  }\n\n  render() {\n    const { isModalOpen } = this.state;\n\n    const steps = [\n      { name: 'Step 1', component: <p>Step 1</p> },\n      { name: 'Step 2', component: <p>Step 2</p> },\n      { name: 'Step 3', component: <p>Step 3</p> },\n      { name: 'Step 4', component: <p>Step 4</p> },\n      { name: 'Review', component: <p>Review Step</p>, nextButtonText: 'Finish' }\n    ];\n\n    return (\n      <React.Fragment>\n        <Button variant=\"primary\" onClick={this.handleModalToggle}>\n          Show Modal\n        </Button>\n        <Modal\n          isOpen={isModalOpen}\n          variant={ModalVariant.large}\n          showClose={false}\n          onClose={this.handleModalToggle}\n          hasNoBodyWrapper\n          aria-describedby=\"wiz-modal-example-description\"\n          aria-labelledby=\"wiz-modal-example-title\"\n        >\n          <Wizard\n            titleId=\"wiz-modal-example-title\"\n            descriptionId=\"wiz-modal-example-description\"\n            title=\"Simple Wizard\"\n            description=\"Simple Wizard Description\"\n            steps={steps}\n            onClose={this.handleModalToggle}\n            height={400}\n        />\n        </Modal>\n      </React.Fragment>\n    );\n  }\n}","title":"With wizard","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsModalReactDocs} {...{"code":"import React from 'react';\nimport { Modal, Button, Dropdown, DropdownToggle, DropdownItem, KebabToggle } from '@patternfly/react-core';\n\nclass WithDropdown extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isModalOpen: false,\n      isDropdownOpen: false\n    };\n    this.handleModalToggle = () => {\n      const { isModalOpen } = this.state;\n      this.setState({\n        isModalOpen: !isModalOpen,\n        isDropdownOpen: false\n      });\n    };\n    this.onToggle = isDropdownOpen => {\n      this.setState({\n        isDropdownOpen\n      });\n    };\n    this.onSelect = event => {\n      this.setState({\n        isDropdownOpen: !this.state.isDropdownOpen\n      });\n      this.onFocus();\n    };\n    this.onFocus = () => {\n      const element = document.getElementById('toggle-id-menu-document-body');\n      element.focus();\n    };\n    this.onEscapePress = () => {\n      const { isDropdownOpen } = this.state;\n      if (isDropdownOpen) {\n        this.setState({\n          isDropdownOpen: !isDropdownOpen\n        }, () => {\n          this.onFocus();\n        });\n      } else {\n        this.handleModalToggle();\n      }\n    }\n  }\n\n  render() {\n    const { isModalOpen, isDropdownOpen } = this.state;\n\n    const dropdownItems = [\n      <DropdownItem key=\"link\">Link</DropdownItem>,\n      <DropdownItem key=\"action\" component=\"button\">\n        Action\n      </DropdownItem>,\n      <DropdownItem key=\"disabled link\" isDisabled>\n        Disabled Link\n      </DropdownItem>,\n      <DropdownItem key=\"disabled action\" isDisabled component=\"button\">\n        Disabled Action\n      </DropdownItem>,\n      <DropdownItem key=\"separated link\">Separated Link</DropdownItem>,\n      <DropdownItem key=\"separated action\" component=\"button\">\n        Separated Action\n      </DropdownItem>\n    ];\n\n    return (\n      <React.Fragment>\n        <Button variant=\"primary\" onClick={this.handleModalToggle}>\n          Show Modal\n        </Button>\n        <Modal\n          title=\"Modal with dropdown\"\n          variant={ModalVariant.small}\n          isOpen={isModalOpen}\n          onClose={this.handleModalToggle}\n          actions={[\n            <Button key=\"confirm\" variant=\"primary\" onClick={this.handleModalToggle}>\n              Confirm\n            </Button>,\n            <Button key=\"cancel\" variant=\"link\" onClick={this.handleModalToggle}>\n              Cancel\n            </Button>\n          ]}\n          onEscapePress={this.onEscapePress}\n        >\n          <div>\n            Set the dropdown <strong>menuAppendTo</strong> prop to <em>parent</em> in order to allow the dropdown menu break out of the modal container. You'll also want to handle closing of the modal yourself, by listening to the <strong>onEscapePress</strong> callback on the Modal component, so you can close the Dropdown first if it's open.\n          </div>\n          <div>\n            <Dropdown\n              onSelect={this.onSelect}\n              toggle={\n                <DropdownToggle id=\"toggle-id-menu-document-body\" onToggle={this.onToggle} toggleIndicator={CaretDownIcon}>\n                  Dropdown with a menu that can break out\n                </DropdownToggle>\n              }\n              isOpen={isDropdownOpen}\n              dropdownItems={dropdownItems}\n              menuAppendTo=\"parent\"\n            />\n          </div>\n        </Modal>\n      </React.Fragment>\n    );\n  }\n}","title":"With dropdown","lang":"js"}}>
    </Example>
  </React.Fragment>
);
DocumentationComponentsModalReactDocs.Component.displayName = 'DocumentationComponentsModalReactDocs';
