import React from 'react';
import { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';


export const DocumentationComponentsSelectReactDocs = {
  "slug": "/documentation/components/select/react",
  "source": "react",
  "propComponents": [
    "Select",
    "SelectOption",
    "SelectGroup",
    "SelectOptionObject"
  ],
  "sourceLink": "https://github.com/patternfly/patternfly-react/blob/master/packages/react-core/src/components/Select/examples/Select.md",
  "section": "components",
  "id": "Select",
  "title": "Select",
  "toc": [
    "Examples"
  ],
  "cssPrefix": "pf-c-select"
};
DocumentationComponentsSelectReactDocs.liveContext = {
  
};
DocumentationComponentsSelectReactDocs.Component = () => (
  <React.Fragment>
    <AutoLinkHeader {...{"size":"h2","className":"ws-title ws-h2"}}>
      {`Examples`}
    </AutoLinkHeader>
    <Example {...DocumentationComponentsSelectReactDocs} {...{"code":"import React from 'react';\nimport { CubeIcon } from '@patternfly/react-icons';\nimport { Select, SelectOption, SelectVariant, SelectDirection, Checkbox } from '@patternfly/react-core';\n\nclass SingleSelectInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.options = [\n      { value: 'Choose...', disabled: false, isPlaceholder: true },\n      { value: 'Mr', disabled: false },\n      { value: 'Miss', disabled: false },\n      { value: 'Mrs', disabled: false },\n      { value: 'Ms', disabled: false },\n      { value: 'Dr', disabled: false },\n      { value: 'Other', disabled: false }\n    ];\n\n    this.state = {\n      isToggleIcon: false,\n      isOpen: false,\n      selected: null,\n      isDisabled: false,\n      direction: SelectDirection.down\n    };\n\n    this.onToggle = isOpen => {\n      this.setState({\n        isOpen\n      });\n    };\n\n    this.onSelect = (event, selection, isPlaceholder) => {\n      if (isPlaceholder) this.clearSelection();\n      else {\n        this.setState({\n          selected: selection,\n          isOpen: false\n        });\n        console.log('selected:', selection);\n      }\n    };\n\n    this.clearSelection = () => {\n      this.setState({\n        selected: null,\n        isOpen: false\n      });\n    };\n\n    this.toggleDisabled = checked => {\n      this.setState({\n        isDisabled: checked\n      });\n    };\n\n    this.setIcon = checked => {\n      this.setState({\n        isToggleIcon: checked\n      });\n    };\n\n    this.toggleDirection = () => {\n      if (this.state.direction === SelectDirection.up) {\n        this.setState({\n          direction: SelectDirection.down\n        });\n      } else {\n        this.setState({\n          direction: SelectDirection.up\n        });\n      }\n    };\n  }\n\n  render() {\n    const { isOpen, selected, isDisabled, direction, isToggleIcon } = this.state;\n    const titleId = 'title-id-1';\n    return (\n      <div>\n        <span id={titleId} hidden>\n          Title\n        </span>\n        <Select\n          toggleIcon={isToggleIcon && <CubeIcon />}\n          variant={SelectVariant.single}\n          aria-label=\"Select Input\"\n          onToggle={this.onToggle}\n          onSelect={this.onSelect}\n          selections={selected}\n          isOpen={isOpen}\n          aria-labelledby={titleId}\n          isDisabled={isDisabled}\n          direction={direction}\n        >\n          {this.options.map((option, index) => (\n            <SelectOption\n              isDisabled={option.disabled}\n              key={index}\n              value={option.value}\n              isPlaceholder={option.isPlaceholder}\n            />\n          ))}\n        </Select>\n        <Checkbox\n          label=\"isDisabled\"\n          isChecked={this.state.isDisabled}\n          onChange={this.toggleDisabled}\n          aria-label=\"disabled checkbox\"\n          id=\"toggle-disabled\"\n          name=\"toggle-disabled\"\n        />\n        <Checkbox\n          label=\"Expands up\"\n          isChecked={direction === SelectDirection.up}\n          onChange={this.toggleDirection}\n          aria-label=\"direction checkbox\"\n          id=\"toggle-direction\"\n          name=\"toggle-direction\"\n        />\n        <Checkbox\n          label=\"Show icon\"\n          isChecked={isToggleIcon}\n          onChange={this.setIcon}\n          aria-label=\"show icon checkbox\"\n          id=\"toggle-icon\"\n          name=\"toggle-icon\"\n        />\n      </div>\n    );\n  }\n}","title":"Single","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsSelectReactDocs} {...{"code":"import React from 'react';\nimport { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\n\nclass SingleSelectDescription extends React.Component {\n  constructor(props) {\n    super(props);\n    this.options = [\n      { value: 'Mr', disabled: false },\n      { value: 'Miss', disabled: false },\n      { value: 'Mrs', disabled: false },\n      { value: 'Ms', disabled: false },\n      { value: 'Dr', disabled: false },\n      { value: 'Other', disabled: false }\n    ];\n\n    this.state = {\n      isOpen: false,\n      selected: null,\n      isDisabled: false\n    };\n\n    this.onToggle = isOpen => {\n      this.setState({\n        isOpen\n      });\n    };\n\n    this.onSelect = (event, selection, isPlaceholder) => {\n      if (isPlaceholder) this.clearSelection();\n      else {\n        this.setState({\n          selected: selection,\n          isOpen: false\n        });\n        console.log('selected:', selection);\n      }\n    };\n\n    this.clearSelection = () => {\n      this.setState({\n        selected: null,\n        isOpen: false\n      });\n    };\n  }\n\n  render() {\n    const { isOpen, selected, isDisabled, direction, isToggleIcon } = this.state;\n    const titleId = 'select-descriptions-title';\n    return (\n      <div>\n        <span id={titleId} hidden>\n          Title\n        </span>\n        <Select\n          variant={SelectVariant.single}\n          placeholderText=\"Select an option\"\n          aria-label=\"Select Input with descriptions\"\n          onToggle={this.onToggle}\n          onSelect={this.onSelect}\n          selections={selected}\n          isOpen={isOpen}\n          aria-labelledby={titleId}\n          isDisabled={isDisabled}\n        >\n          {this.options.map((option, index) => (\n            <SelectOption\n              isDisabled={option.disabled}\n              key={index}\n              value={option.value}\n              isPlaceholder={option.isPlaceholder}\n              description=\"This is a description\"\n            />\n          ))}\n        </Select>\n      </div>\n    );\n  }\n}","title":"Single with description","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsSelectReactDocs} {...{"code":"import React from 'react';\nimport { Select, SelectOption, SelectVariant, SelectGroup } from '@patternfly/react-core';\n\nclass GroupedSingleSelectInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false,\n      selected: null\n    };\n\n    this.onToggle = isOpen => {\n      this.setState({\n        isOpen\n      });\n    };\n\n    this.onSelect = (event, selection) => {\n      this.setState({\n        selected: selection,\n        isOpen: false\n      });\n    };\n\n    this.clearSelection = () => {\n      this.setState({\n        selected: null\n      });\n    };\n\n    this.options = [\n      <SelectGroup label=\"Status\" key=\"group1\">\n        <SelectOption key={0} value=\"Running\" />\n        <SelectOption key={1} value=\"Stopped\" />\n        <SelectOption key={2} value=\"Down\" />\n        <SelectOption key={3} value=\"Degraded\" />\n        <SelectOption key={4} value=\"Needs Maintenence\" />\n      </SelectGroup>,\n      <SelectGroup label=\"Vendor Names\" key=\"group2\">\n        <SelectOption key={5} value=\"Dell\" />\n        <SelectOption key={6} value=\"Samsung\" isDisabled />\n        <SelectOption key={7} value=\"Hewlett-Packard\" />\n      </SelectGroup>\n    ];\n  }\n\n  render() {\n    const { isOpen, selected } = this.state;\n    const titleId = 'grouped-single-select-id';\n    return (\n      <div>\n        <span id={titleId} hidden>\n          Grouped Checkbox Title\n        </span>\n        <Select\n          variant={SelectVariant.single}\n          onToggle={this.onToggle}\n          onSelect={this.onSelect}\n          selections={selected}\n          isOpen={isOpen}\n          placeholderText=\"Filter by status/vendor\"\n          aria-labelledby={titleId}\n          isGrouped\n        >\n          {this.options}\n        </Select>\n      </div>\n    );\n  }\n}","title":"Grouped single","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsSelectReactDocs} {...{"code":"import React from 'react';\nimport { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\n\nclass CheckboxSelectInput extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isOpen: false,\n      selected: []\n    };\n\n    this.onToggle = isOpen => {\n      this.setState({\n        isOpen\n      });\n    };\n\n    this.onSelect = (event, selection) => {\n      const { selected } = this.state;\n      if (selected.includes(selection)) {\n        this.setState(\n          prevState => ({ selected: prevState.selected.filter(item => item !== selection) }),\n          () => console.log('selections: ', this.state.selected)\n        );\n      } else {\n        this.setState(\n          prevState => ({ selected: [...prevState.selected, selection] }),\n          () => console.log('selections: ', this.state.selected)\n        );\n      }\n    };\n\n    this.clearSelection = () => {\n      this.setState({\n        selected: []\n      });\n    };\n\n    this.options = [\n      <SelectOption key={0} value=\"Active\" description=\"This is a description\" />,\n      <SelectOption key={1} value=\"Cancelled\" />,\n      <SelectOption key={2} value=\"Paused\" />,\n      <SelectOption key={3} value=\"Warning\" />,\n      <SelectOption key={4} value=\"Restarted\" />\n    ];\n  }\n\n  render() {\n    const { isOpen, selected } = this.state;\n    const titleId = 'checkbox-select-id';\n    return (\n      <div>\n        <span id={titleId} hidden>\n          Checkbox Title\n        </span>\n        <Select\n          variant={SelectVariant.checkbox}\n          aria-label=\"Select Input\"\n          onToggle={this.onToggle}\n          onSelect={this.onSelect}\n          selections={selected}\n          isOpen={isOpen}\n          placeholderText=\"Filter by status\"\n          aria-labelledby={titleId}\n        >\n          {this.options}\n        </Select>\n      </div>\n    );\n  }\n}","title":"Checkbox input","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsSelectReactDocs} {...{"code":"import React from 'react';\nimport { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\n\nclass CheckboxSelectInputNoBadge extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isOpen: false,\n      selected: []\n    };\n\n    this.onToggle = isOpen => {\n      this.setState({\n        isOpen\n      });\n    };\n\n    this.onSelect = (event, selection) => {\n      const { selected } = this.state;\n      if (selected.includes(selection)) {\n        this.setState(\n          prevState => ({ selected: prevState.selected.filter(item => item !== selection) }),\n          () => console.log('selections: ', this.state.selected)\n        );\n      } else {\n        this.setState(\n          prevState => ({ selected: [...prevState.selected, selection] }),\n          () => console.log('selections: ', this.state.selected)\n        );\n      }\n    };\n\n    this.clearSelection = () => {\n      this.setState({\n        selected: []\n      });\n    };\n\n    this.options = [\n      <SelectOption key={0} value=\"Debug\" />,\n      <SelectOption key={1} value=\"Info\" />,\n      <SelectOption key={2} value=\"Warn\" />,\n      <SelectOption key={3} value=\"Error\" />\n    ];\n  }\n\n  render() {\n    const { isOpen, selected } = this.state;\n    const titleId = 'checkbox-select-id';\n    return (\n      <div>\n        <span id={titleId} hidden>\n          Checkbox Title\n        </span>\n        <Select\n          variant={SelectVariant.checkbox}\n          aria-label=\"Select Input\"\n          onToggle={this.onToggle}\n          onSelect={this.onSelect}\n          selections={selected}\n          isCheckboxSelectionBadgeHidden\n          isOpen={isOpen}\n          placeholderText=\"Filter by status\"\n          aria-labelledby={titleId}\n        >\n          {this.options}\n        </Select>\n      </div>\n    );\n  }\n}","title":"Checkbox input no badge","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsSelectReactDocs} {...{"code":"import React from 'react';\nimport { Select, SelectOption, SelectVariant, SelectGroup } from '@patternfly/react-core';\n\nclass GroupedCheckboxSelectInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false,\n      selected: []\n    };\n\n    this.onToggle = isOpen => {\n      this.setState({\n        isOpen\n      });\n    };\n\n    this.onSelect = (event, selection) => {\n      const { selected } = this.state;\n      if (selected.includes(selection)) {\n        this.setState(\n          prevState => ({ selected: prevState.selected.filter(item => item !== selection) }),\n          () => console.log('selections: ', this.state.selected)\n        );\n      } else {\n        this.setState(\n          prevState => ({ selected: [...prevState.selected, selection] }),\n          () => console.log('selections: ', this.state.selected)\n        );\n      }\n    };\n\n    this.clearSelection = () => {\n      this.setState({\n        selected: []\n      });\n    };\n\n    this.options = [\n      <SelectGroup label=\"Status\" key=\"group1\">\n        <SelectOption key={0} value=\"Running\" />\n        <SelectOption key={1} value=\"Stopped\" />\n        <SelectOption key={2} value=\"Down\" />\n        <SelectOption key={3} value=\"Degraded\" />\n        <SelectOption key={4} value=\"Needs Maintenence\" />\n      </SelectGroup>,\n      <SelectGroup label=\"Vendor Names\" key=\"group2\">\n        <SelectOption key={5} value=\"Dell\" />\n        <SelectOption key={6} value=\"Samsung\" isDisabled />\n        <SelectOption key={7} value=\"Hewlett-Packard\" />\n      </SelectGroup>\n    ];\n  }\n\n  render() {\n    const { isOpen, selected } = this.state;\n    const titleId = 'grouped-checkbox-select-id-1';\n    return (\n      <div>\n        <span id={titleId} hidden>\n          Grouped Checkbox Title\n        </span>\n        <Select\n          variant={SelectVariant.checkbox}\n          onToggle={this.onToggle}\n          onSelect={this.onSelect}\n          selections={selected}\n          isOpen={isOpen}\n          placeholderText=\"Filter by status\"\n          aria-labelledby={titleId}\n          isGrouped\n        >\n          {this.options}\n        </Select>\n      </div>\n    );\n  }\n}","title":"Grouped checkbox input","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsSelectReactDocs} {...{"code":"import React from 'react';\nimport { Select, SelectOption, SelectGroup, SelectVariant } from '@patternfly/react-core';\n\nclass FilteringCheckboxSelectInput extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isOpen: false,\n      selected: []\n    };\n\n    this.options = [\n      <SelectGroup label=\"Status\" key=\"group1\">\n        <SelectOption key={0} value=\"Running\" />\n        <SelectOption key={1} value=\"Stopped\" />\n        <SelectOption key={2} value=\"Down\" />\n        <SelectOption key={3} value=\"Degraded\" />\n        <SelectOption key={4} value=\"Needs Maintenence\" />\n      </SelectGroup>,\n      <SelectGroup label=\"Vendor Names\" key=\"group2\">\n        <SelectOption key={5} value=\"Dell\" />\n        <SelectOption key={6} value=\"Samsung\" isDisabled />\n        <SelectOption key={7} value=\"Hewlett-Packard\" />\n      </SelectGroup>\n    ];\n\n    this.onToggle = isOpen => {\n      this.setState({\n        isOpen\n      });\n    };\n\n    this.onSelect = (event, selection) => {\n      const { selected } = this.state;\n      if (selected.includes(selection)) {\n        this.setState(\n          prevState => ({ selected: prevState.selected.filter(item => item !== selection) }),\n          () => console.log('selections: ', this.state.selected)\n        );\n      } else {\n        this.setState(\n          prevState => ({ selected: [...prevState.selected, selection] }),\n          () => console.log('selections: ', this.state.selected)\n        );\n      }\n    };\n\n    this.onFilter = evt => {\n      const textInput = evt.target.value;\n      if (textInput === '') {\n        return this.options;\n      } else {\n        let filteredGroups = this.options\n          .map(group => {\n            let filteredGroup = React.cloneElement(group, {\n              children: group.props.children.filter(item => {\n                return item.props.value.toLowerCase().includes(textInput.toLowerCase());\n              })\n            });\n            if (filteredGroup.props.children.length > 0) return filteredGroup;\n          })\n          .filter(newGroup => newGroup);\n        return filteredGroups;\n      }\n    };\n\n    this.clearSelection = () => {\n      this.setState({\n        selected: []\n      });\n    };\n  }\n\n  render() {\n    const { isOpen, selected, filteredOptions } = this.state;\n    const titleId = 'checkbox-filtering-select-id';\n    return (\n      <div>\n        <span id={titleId} hidden>\n          Checkbox Title\n        </span>\n        <Select\n          variant={SelectVariant.checkbox}\n          onToggle={this.onToggle}\n          onSelect={this.onSelect}\n          selections={selected}\n          isOpen={isOpen}\n          placeholderText=\"Filter by status\"\n          aria-labelledby={titleId}\n          onFilter={this.onFilter}\n          onClear={this.clearSelection}\n          isGrouped\n          hasInlineFilter\n        >\n          {this.options}\n        </Select>\n      </div>\n    );\n  }\n}","title":"Grouped checkbox input with filtering","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsSelectReactDocs} {...{"code":"import React from 'react';\nimport { Select, SelectOption, SelectGroup, SelectVariant } from '@patternfly/react-core';\n\nclass FilteringCheckboxSelectInputWithPlaceholder extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isOpen: false,\n      selected: []\n    };\n\n    this.options = [\n      <SelectGroup label=\"Status\" key=\"group1\">\n        <SelectOption key={0} value=\"Running\" />\n        <SelectOption key={1} value=\"Stopped\" />\n        <SelectOption key={2} value=\"Down\" />\n        <SelectOption key={3} value=\"Degraded\" />\n        <SelectOption key={4} value=\"Needs Maintenence\" />\n      </SelectGroup>,\n      <SelectGroup label=\"Vendor Names\" key=\"group2\">\n        <SelectOption key={5} value=\"Dell\" />\n        <SelectOption key={6} value=\"Samsung\" isDisabled />\n        <SelectOption key={7} value=\"Hewlett-Packard\" />\n      </SelectGroup>\n    ];\n\n    this.onToggle = isOpen => {\n      this.setState({\n        isOpen\n      });\n    };\n\n    this.onSelect = (event, selection) => {\n      const { selected } = this.state;\n      if (selected.includes(selection)) {\n        this.setState(\n          prevState => ({ selected: prevState.selected.filter(item => item !== selection) }),\n          () => console.log('selections: ', this.state.selected)\n        );\n      } else {\n        this.setState(\n          prevState => ({ selected: [...prevState.selected, selection] }),\n          () => console.log('selections: ', this.state.selected)\n        );\n      }\n    };\n\n    this.onFilter = evt => {\n      const textInput = evt.target.value;\n      if (textInput === '') {\n        return this.options;\n      } else {\n        let filteredGroups = this.options\n          .map(group => {\n            let filteredGroup = React.cloneElement(group, {\n              children: group.props.children.filter(item => {\n                return item.props.value.toLowerCase().includes(textInput.toLowerCase());\n              })\n            });\n            if (filteredGroup.props.children.length > 0) return filteredGroup;\n          })\n          .filter(newGroup => newGroup);\n        return filteredGroups;\n      }\n    };\n\n    this.clearSelection = () => {\n      this.setState({\n        selected: []\n      });\n    };\n  }\n\n  render() {\n    const { isOpen, selected, filteredOptions } = this.state;\n    const titleId = 'checkbox-filtering-select-id';\n    return (\n      <div>\n        <span id={titleId} hidden>\n          Checkbox Title\n        </span>\n        <Select\n          variant={SelectVariant.checkbox}\n          onToggle={this.onToggle}\n          onSelect={this.onSelect}\n          selections={selected}\n          isOpen={isOpen}\n          placeholderText=\"Filter by status\"\n          aria-labelledby={titleId}\n          onFilter={this.onFilter}\n          onClear={this.clearSelection}\n          isGrouped\n          hasInlineFilter\n          inlineFilterPlaceholderText=\"Filter by status\"\n        >\n          {this.options}\n        </Select>\n      </div>\n    );\n  }\n}","title":"Grouped checkbox input with filtering and placeholder text","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsSelectReactDocs} {...{"code":"import React from 'react';\nimport { Select, SelectOption, SelectGroup, SelectVariant } from '@patternfly/react-core';\n\nclass FilteringCheckboxSelectInputWithBadging extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isOpen: false,\n      selected: [],\n      customBadgeText: 0\n    };\n\n    this.options = [\n      <SelectGroup label=\"Status\" key=\"group1\">\n        <SelectOption key={0} value=\"Running\" />\n        <SelectOption key={1} value=\"Stopped\" />\n        <SelectOption key={2} value=\"Down\" />\n        <SelectOption key={3} value=\"Degraded\" />\n        <SelectOption key={4} value=\"Needs Maintenence\" />\n      </SelectGroup>,\n      <SelectGroup label=\"Vendor Names\" key=\"group2\">\n        <SelectOption key={5} value=\"Dell\" />\n        <SelectOption key={6} value=\"Samsung\" isDisabled />\n        <SelectOption key={7} value=\"Hewlett-Packard\" />\n      </SelectGroup>\n    ];\n\n    this.onToggle = isOpen => {\n      this.setState({\n        isOpen\n      });\n    };\n\n    this.onSelect = (event, selection) => {\n      const { selected } = this.state;\n      if (selected.includes(selection)) {\n        this.setState(\n          prevState => ({\n            selected: prevState.selected.filter(item => item !== selection),\n            customBadgeText: this.setBadgeText(prevState.selected.length - 1)\n          }),\n          () => console.log('selections: ', this.state.selected)\n        );\n      } else {\n        this.setState(\n          prevState => ({\n            selected: [...prevState.selected, selection],\n            customBadgeText: this.setBadgeText(prevState.selected.length + 1)\n          }),\n          () => console.log('selections: ', this.state.selected)\n        );\n      }\n    };\n\n    this.onFilter = evt => {\n      const textInput = evt.target.value;\n      if (textInput === '') {\n        return this.options;\n      } else {\n        let filteredGroups = this.options\n          .map(group => {\n            let filteredGroup = React.cloneElement(group, {\n              children: group.props.children.filter(item => {\n                return item.props.value.toLowerCase().includes(textInput.toLowerCase());\n              })\n            });\n            if (filteredGroup.props.children.length > 0) return filteredGroup;\n          })\n          .filter(newGroup => newGroup);\n        return filteredGroups;\n      }\n    };\n\n    this.clearSelection = () => {\n      this.setState({\n        selected: [],\n        customBadgeText: this.setBadgeText(0)\n      });\n    };\n\n    this.setBadgeText = selected => {\n      if (selected === 7) {\n        return 'All';\n      }\n      if (selected === 0) {\n        return 0;\n      }\n      return null;\n    };\n  }\n\n  render() {\n    const { isOpen, selected, filteredOptions, customBadgeText } = this.state;\n    const titleId = 'checkbox-filtering-select-id';\n    return (\n      <div>\n        <span id={titleId} hidden>\n          Checkbox Title\n        </span>\n        <Select\n          variant={SelectVariant.checkbox}\n          onToggle={this.onToggle}\n          onSelect={this.onSelect}\n          selections={selected}\n          isOpen={isOpen}\n          placeholderText=\"Filter by status\"\n          aria-labelledby={titleId}\n          onFilter={this.onFilter}\n          onClear={this.clearSelection}\n          isGrouped\n          hasInlineFilter\n          customBadgeText={customBadgeText}\n        >\n          {this.options}\n        </Select>\n      </div>\n    );\n  }\n}","title":"Grouped checkbox input with filtering and custom badging","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsSelectReactDocs} {...{"code":"import React from 'react';\nimport { Checkbox, Select, SelectOption, SelectVariant } from '@patternfly/react-core';\n\nclass TypeaheadSelectInput extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      options: [\n        { value: 'Alabama' },\n        { value: 'Florida', description: 'This is a description' },\n        { value: 'New Jersey' },\n        { value: 'New Mexico' },\n        { value: 'New York' },\n        { value: 'North Carolina' }\n      ],\n      isOpen: false,\n      selected: null,\n      isDisabled: false,\n      isCreatable: false,\n      hasOnCreateOption: false\n    };\n\n    this.onToggle = isOpen => {\n      this.setState({\n        isOpen\n      });\n    };\n\n    this.onSelect = (event, selection, isPlaceholder) => {\n      if (isPlaceholder) this.clearSelection();\n      else {\n        this.setState({\n          selected: selection,\n          isOpen: false\n        });\n        console.log('selected:', selection);\n      }\n    };\n\n    this.onCreateOption = newValue => {\n      this.setState({\n        options: [...this.state.options, { value: newValue }]\n      });\n    };\n\n    this.clearSelection = () => {\n      this.setState({\n        selected: null,\n        isOpen: false\n      });\n    };\n\n    this.toggleDisabled = checked => {\n      this.setState({\n        isDisabled: checked\n      });\n    };\n\n    this.toggleCreatable = checked => {\n      this.setState({\n        isCreatable: checked\n      });\n    };\n\n    this.toggleCreateNew = checked => {\n      this.setState({\n        hasOnCreateOption: checked\n      });\n    };\n  }\n\n  render() {\n    const { isOpen, selected, isDisabled, isCreatable, hasOnCreateOption, options } = this.state;\n    const titleId = 'typeahead-select-id-1';\n    return (\n      <div>\n        <span id={titleId} hidden>\n          Select a state\n        </span>\n        <Select\n          variant={SelectVariant.typeahead}\n          typeAheadAriaLabel=\"Select a state\"\n          onToggle={this.onToggle}\n          onSelect={this.onSelect}\n          onClear={this.clearSelection}\n          selections={selected}\n          isOpen={isOpen}\n          aria-labelledby={titleId}\n          placeholderText=\"Select a state\"\n          isDisabled={isDisabled}\n          isCreatable={isCreatable}\n          onCreateOption={(hasOnCreateOption && this.onCreateOption) || undefined}\n        >\n          {options.map((option, index) => (\n            <SelectOption\n              isDisabled={option.disabled}\n              key={index}\n              value={option.value}\n              {...(option.description && { description: option.description })}\n            />\n          ))}\n        </Select>\n        <Checkbox\n          label=\"isDisabled\"\n          isChecked={this.state.isDisabled}\n          onChange={this.toggleDisabled}\n          aria-label=\"toggle disabled checkbox\"\n          id=\"toggle-disabled-typeahead\"\n          name=\"toggle-disabled-typeahead\"\n        />\n        <Checkbox\n          label=\"isCreatable\"\n          isChecked={this.state.isCreatable}\n          onChange={this.toggleCreatable}\n          aria-label=\"toggle creatable checkbox\"\n          id=\"toggle-creatable-typeahead\"\n          name=\"toggle-creatable-typeahead\"\n        />\n        <Checkbox\n          label=\"onCreateOption\"\n          isChecked={this.state.hasOnCreateOption}\n          onChange={this.toggleCreateNew}\n          aria-label=\"toggle new checkbox\"\n          id=\"toggle-new-typeahead\"\n          name=\"toggle-new-typeahead\"\n        />\n      </div>\n    );\n  }\n}","title":"Typeahead","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsSelectReactDocs} {...{"code":"import React from 'react';\nimport { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\n\nclass TypeaheadSelectInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.options = [\n      <SelectOption key={0} value=\"Alabama\" />,\n      <SelectOption key={1} value=\"Florida\" />,\n      <SelectOption key={2} value=\"New Jersey\" />,\n      <SelectOption key={3} value=\"New Mexico\" />,\n      <SelectOption key={4} value=\"New York\" />,\n      <SelectOption key={5} value=\"North Carolina\" />\n    ];\n    this.state = {\n      isOpen: false,\n      selected: null\n    };\n\n    this.onToggle = isOpen => {\n      this.setState({\n        isOpen\n      });\n    };\n\n    this.onSelect = (event, selection, isPlaceholder) => {\n      if (isPlaceholder) this.clearSelection();\n      else {\n        this.setState({\n          selected: selection,\n          isOpen: false\n        });\n        console.log('selected:', selection);\n      }\n    };\n\n    this.clearSelection = () => {\n      this.setState({\n        selected: null,\n        isOpen: false\n      });\n    };\n\n    this.customFilter = e => {\n      let input;\n      try {\n        input = new RegExp(e.target.value, 'i');\n      } catch (err) {}\n      return e.target.value !== '' ? this.options.filter(child => input.test(child.props.value)) : this.options;\n    };\n  }\n\n  render() {\n    const { isOpen, selected } = this.state;\n    const titleId = 'typeahead-select-id-2';\n    return (\n      <div>\n        <span id={titleId} hidden>\n          Select a state\n        </span>\n        <Select\n          variant={SelectVariant.typeahead}\n          typeAheadAriaLabel=\"Select a state\"\n          onToggle={this.onToggle}\n          onSelect={this.onSelect}\n          onClear={this.clearSelection}\n          onFilter={this.customFilter}\n          selections={selected}\n          isOpen={isOpen}\n          aria-labelledby={titleId}\n          placeholderText=\"Select a state\"\n        >\n          {this.options}\n        </Select>\n      </div>\n    );\n  }\n}","title":"Custom filtering","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsSelectReactDocs} {...{"code":"import React from 'react';\nimport { Checkbox, Select, SelectOption, SelectVariant } from '@patternfly/react-core';\n\nclass MultiTypeaheadSelectInput extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      options: [\n        { value: 'Alabama', disabled: false },\n        { value: 'Florida', disabled: false },\n        { value: 'New Jersey', disabled: false },\n        { value: 'New Mexico', disabled: false, description: 'This is a description' },\n        { value: 'New York', disabled: false },\n        { value: 'North Carolina', disabled: false }\n      ],\n      isOpen: false,\n      selected: [],\n      isCreatable: false,\n      hasOnCreateOption: false\n    };\n\n    this.onCreateOption = newValue => {\n      this.setState({\n        options: [...this.state.options, { value: newValue }]\n      });\n    };\n\n    this.onToggle = isOpen => {\n      this.setState({\n        isOpen\n      });\n    };\n\n    this.onSelect = (event, selection) => {\n      const { selected } = this.state;\n      if (selected.includes(selection)) {\n        this.setState(\n          prevState => ({ selected: prevState.selected.filter(item => item !== selection) }),\n          () => console.log('selections: ', this.state.selected)\n        );\n      } else {\n        this.setState(\n          prevState => ({ selected: [...prevState.selected, selection] }),\n          () => console.log('selections: ', this.state.selected)\n        );\n      }\n    };\n\n    this.clearSelection = () => {\n      this.setState({\n        selected: [],\n        isOpen: false\n      });\n    };\n\n    this.toggleCreatable = checked => {\n      this.setState({\n        isCreatable: checked\n      });\n    };\n\n    this.toggleCreateNew = checked => {\n      this.setState({\n        hasOnCreateOption: checked\n      });\n    };\n  }\n\n  render() {\n    const { isOpen, selected, isCreatable, hasOnCreateOption } = this.state;\n    const titleId = 'multi-typeahead-select-id-1';\n\n    return (\n      <div>\n        <span id={titleId} hidden>\n          Select a state\n        </span>\n        <Select\n          variant={SelectVariant.typeaheadMulti}\n          typeAheadAriaLabel=\"Select a state\"\n          onToggle={this.onToggle}\n          onSelect={this.onSelect}\n          onClear={this.clearSelection}\n          selections={selected}\n          isOpen={isOpen}\n          aria-labelledby={titleId}\n          placeholderText=\"Select a state\"\n          isCreatable={isCreatable}\n          onCreateOption={(hasOnCreateOption && this.onCreateOption) || undefined}\n        >\n          {this.state.options.map((option, index) => (\n            <SelectOption\n              isDisabled={option.disabled}\n              key={index}\n              value={option.value}\n              {...(option.description && { description: option.description })}\n            />\n          ))}\n        </Select>\n        <Checkbox\n          label=\"isCreatable\"\n          isChecked={this.state.isCreatable}\n          onChange={this.toggleCreatable}\n          aria-label=\"toggle creatable checkbox\"\n          id=\"toggle-creatable-typeahead-multi\"\n          name=\"toggle-creatable-typeahead-multi\"\n        />\n        <Checkbox\n          label=\"onCreateOption\"\n          isChecked={this.state.hasOnCreateOption}\n          onChange={this.toggleCreateNew}\n          aria-label=\"toggle new checkbox\"\n          id=\"toggle-new-typeahead-multi\"\n          name=\"toggle-new-typeahead-multi\"\n        />\n      </div>\n    );\n  }\n}","title":"Multiple","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsSelectReactDocs} {...{"code":"import React from 'react';\nimport { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\n\nclass MultiTypeaheadSelectInputCustomObjects extends React.Component {\n  constructor(props) {\n    super(props);\n    this.createState = (name, abbreviation, capital, founded) => {\n      return {\n        name: name,\n        abbreviation: abbreviation,\n        capital: capital,\n        founded: founded,\n        toString: function() {\n          return `${this.name} (${this.abbreviation}) - Founded: ${this.founded}`;\n        },\n        compareTo: function(value) {\n          return this.toString()\n            .toLowerCase()\n            .includes(value.toString().toLowerCase());\n        }\n      };\n    };\n    this.options = [\n      <SelectOption key={0} value={this.createState('Alabama', 'AL', 'Montgomery', 1846)} />,\n      <SelectOption key={1} value={this.createState('Florida', 'FL', 'Tailahassee', 1845)} />,\n      <SelectOption key={2} value={this.createState('New Jersey', 'NJ', 'Trenton', 1787)} />,\n      <SelectOption key={3} value={this.createState('New Mexico', 'NM', 'Santa Fe', 1912)} />,\n      <SelectOption key={4} value={this.createState('New York', 'NY', 'Albany', 1788)} />,\n      <SelectOption key={5} value={this.createState('North Carolina', 'NC', 'Raleigh', 1789)} />\n    ];\n\n    this.state = {\n      isOpen: false,\n      selected: []\n    };\n\n    this.onToggle = isOpen => {\n      this.setState({\n        isOpen\n      });\n    };\n\n    this.onSelect = (event, selection) => {\n      const { selected } = this.state;\n      if (selected.includes(selection)) {\n        this.setState(\n          prevState => ({ selected: prevState.selected.filter(item => item !== selection) }),\n          () => console.log('selections: ', this.state.selected)\n        );\n      } else {\n        this.setState(\n          prevState => ({ selected: [...prevState.selected, selection] }),\n          () => console.log('selections: ', this.state.selected)\n        );\n      }\n    };\n\n    this.clearSelection = () => {\n      this.setState({\n        selected: [],\n        isOpen: false\n      });\n    };\n\n    this.customFilter = e => {\n      console.log(e);\n      const input = e.target.value.toString();\n      let typeaheadFilteredChildren =\n        input !== '' ? this.options.filter(option => option.props.value.compareTo(input)) : this.options;\n      return typeaheadFilteredChildren;\n    };\n  }\n\n  render() {\n    const { isOpen, selected } = this.state;\n    const titleId = 'multi-typeahead-select-id-2';\n\n    return (\n      <div>\n        <span id={titleId} hidden>\n          Select a state\n        </span>\n        <Select\n          variant={SelectVariant.typeaheadMulti}\n          typeAheadAriaLabel=\"Select a state\"\n          onToggle={this.onToggle}\n          onSelect={this.onSelect}\n          onClear={this.clearSelection}\n          onFilter={this.customFilter}\n          selections={selected}\n          isOpen={isOpen}\n          aria-labelledby={titleId}\n          placeholderText=\"Select a state\"\n        >\n          {this.options}\n        </Select>\n      </div>\n    );\n  }\n}","title":"Multiple with custom objects","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsSelectReactDocs} {...{"code":"import React from 'react';\nimport { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\n\nclass PlainSelectInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.options = [\n      { value: 'Alabama', disabled: false },\n      { value: 'Florida', disabled: false },\n      { value: 'New Jersey', disabled: false },\n      { value: 'New Mexico', disabled: false },\n      { value: 'New York', disabled: false },\n      { value: 'North Carolina', disabled: false }\n    ];\n\n    this.state = {\n      isOpen: false,\n      isPlain: true,\n      selected: []\n    };\n\n    this.onToggle = isOpen => {\n      this.setState({\n        isOpen\n      });\n    };\n\n    this.onSelect = (event, selection) => {\n      const { selected } = this.state;\n      if (selected.includes(selection)) {\n        this.setState(\n          prevState => ({ selected: prevState.selected.filter(item => item !== selection) }),\n          () => console.log('selections: ', this.state.selected)\n        );\n      } else {\n        this.setState(\n          prevState => ({ selected: [...prevState.selected, selection] }),\n          () => console.log('selections: ', this.state.selected)\n        );\n      }\n    };\n\n    this.clearSelection = () => {\n      this.setState({\n        selected: [],\n        isOpen: false\n      });\n    };\n  }\n\n  render() {\n    const { isOpen, isPlain, selected } = this.state;\n    const titleId = 'plain-typeahead-select-id';\n\n    return (\n      <div>\n        <span id={titleId} hidden>\n          Select a state\n        </span>\n        <Select\n          variant={SelectVariant.typeaheadMulti}\n          typeAheadAriaLabel=\"Select a state\"\n          onToggle={this.onToggle}\n          onSelect={this.onSelect}\n          onClear={this.clearSelection}\n          selections={selected}\n          isOpen={isOpen}\n          isPlain={isPlain}\n          aria-labelledby={titleId}\n          placeholderText=\"Select a state\"\n        >\n          {this.options.map((option, index) => (\n            <SelectOption isDisabled={option.disabled} key={index} value={option.value} />\n          ))}\n        </Select>\n      </div>\n    );\n  }\n}","title":"Plain multiple typeahead","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsSelectReactDocs} {...{"code":"import React from 'react';\nimport { CubeIcon } from '@patternfly/react-icons';\nimport { Select, SelectOption, SelectVariant, SelectDirection, Checkbox } from '@patternfly/react-core';\n\nclass SingleSelectInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false,\n      isDisabled: false,\n      direction: SelectDirection.down\n    };\n\n    this.onToggle = isOpen => {\n      this.setState({\n        isOpen\n      });\n    };\n\n    this.toggleDisabled = checked => {\n      this.setState({\n        isDisabled: checked\n      });\n    };\n\n    this.toggleDirection = () => {\n      if (this.state.direction === SelectDirection.up) {\n        this.setState({\n          direction: SelectDirection.down\n        });\n      } else {\n        this.setState({\n          direction: SelectDirection.up\n        });\n      }\n    };\n  }\n\n  render() {\n    const { isOpen, selected, isDisabled, direction } = this.state;\n    const titleId = 'title-id-2';\n    return (\n      <div>\n        <span id={titleId} hidden>\n          Title\n        </span>\n        <Select\n          variant={SelectVariant.panel}\n          aria-label=\"Select Input\"\n          onToggle={this.onToggle}\n          isOpen={isOpen}\n          aria-labelledby={titleId}\n          isDisabled={isDisabled}\n          direction={direction}\n          customContent=\"[Panel contents here]\"\n          placeholderText=\"Filter by birth month\"\n        />\n        <Checkbox\n          label=\"isDisabled\"\n          isChecked={this.state.isDisabled}\n          onChange={this.toggleDisabled}\n          aria-label=\"disabled checkbox panel\"\n          id=\"toggle-disabled-panel\"\n          name=\"toggle-disabled-panel\"\n        />\n        <Checkbox\n          label=\"Expands up\"\n          isChecked={direction === SelectDirection.up}\n          onChange={this.toggleDirection}\n          aria-label=\"direction checkbox panel\"\n          id=\"toggle-direction-panel\"\n          name=\"toggle-direction-panel\"\n        />\n      </div>\n    );\n  }\n}","title":"Panel","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsSelectReactDocs} {...{"code":"import React from 'react';\nimport { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\n\nclass SelectMenuDocumentBody extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isOpen: false,\n      selected: []\n    };\n\n    this.onToggle = isOpen => {\n      this.setState({\n        isOpen\n      });\n    };\n\n    this.onSelect = (event, selection) => {\n      const { selected } = this.state;\n      if (selected.includes(selection)) {\n        this.setState(\n          prevState => ({ selected: prevState.selected.filter(item => item !== selection) }),\n          () => console.log('selections: ', this.state.selected)\n        );\n      } else {\n        this.setState(\n          prevState => ({ selected: [...prevState.selected, selection] }),\n          () => console.log('selections: ', this.state.selected)\n        );\n      }\n    };\n\n    this.clearSelection = () => {\n      this.setState({\n        selected: []\n      });\n    };\n\n    this.options = [\n      <SelectOption key={0} value=\"Debug\" />,\n      <SelectOption key={1} value=\"Info\" />,\n      <SelectOption key={2} value=\"Warn\" />,\n      <SelectOption key={3} value=\"Error\" />\n    ];\n  }\n\n  render() {\n    const { isOpen, selected } = this.state;\n    const titleId = 'checkbox-select-id-document-body';\n    return (\n      <div style={{ height: '50px', overflow: 'hidden' }}>\n        <span id={titleId} hidden>\n          Checkbox Title\n        </span>\n        <Select\n          variant={SelectVariant.checkbox}\n          aria-label=\"Select Input\"\n          onToggle={this.onToggle}\n          onSelect={this.onSelect}\n          selections={selected}\n          isCheckboxSelectionBadgeHidden\n          isOpen={isOpen}\n          placeholderText=\"Filter by status\"\n          aria-labelledby={titleId}\n          menuAppendTo={() => document.body}\n        >\n          {this.options}\n        </Select>\n      </div>\n    );\n  }\n}","title":"select menu document body","lang":"js"}}>
    </Example>
  </React.Fragment>
);
DocumentationComponentsSelectReactDocs.Component.displayName = 'DocumentationComponentsSelectReactDocs';
