import React from 'react';
import { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';
import {
  Table,
  TableHeader,
  TableBody,
  TableText,
  sortable,
  SortByDirection,
  headerCol,
  TableVariant,
  expandable,
  compoundExpand,
  cellWidth,
  textCenter,
  wrappable,
  truncate,
  nowrap,
  breakWord,
  fitContent,
  classNames,
  Visibility,
  getErrorTextByValidator,
  cancelCellEdits,
  validateCellEdits,
  applyCellEdits,
  EditableTextCell,
  EditableSelectInputCell
} from '@patternfly/react-table';
import {
  SearchIcon,
  CodeBranchIcon,
  CodeIcon,
  CubeIcon
} from '@patternfly/react-icons';
import { css } from '@patternfly/react-styles';
import styles from '@patternfly/react-styles/css/components/Table/table';
import DemoSortableTable from '../../../../../../../node_modules/@patternfly/react-table/src/components/Table/examples/./DemoSortableTable';

export const DocumentationComponentsTableReactDocs = {
  "slug": "/documentation/components/table/react",
  "source": "react",
  "propComponents": [
    "Table",
    "TableHeader",
    "TableBody",
    "EditableSelectInputCell",
    "EditableTextCell",
    "RowErrors",
    "IHeaderRow",
    "IRowData",
    "IColumn",
    "IExtraRowData",
    "IExtraColumnData",
    "ISortBy",
    "IAction",
    "ISeparator",
    "ICell",
    "IRowCell",
    "IValidatorDef",
    "IRow"
  ],
  "sourceLink": "https://github.com/patternfly/patternfly-react/blob/master/packages/react-table/src/components/Table/examples/Table.md",
  "section": "components",
  "id": "Table",
  "title": "Table",
  "toc": [
    "Examples"
  ],
  "cssPrefix": "pf-c-table"
};
DocumentationComponentsTableReactDocs.liveContext = {
  Table,
  TableHeader,
  TableBody,
  TableText,
  sortable,
  SortByDirection,
  headerCol,
  TableVariant,
  expandable,
  compoundExpand,
  cellWidth,
  textCenter,
  wrappable,
  truncate,
  nowrap,
  breakWord,
  fitContent,
  classNames,
  Visibility,
  getErrorTextByValidator,
  cancelCellEdits,
  validateCellEdits,
  applyCellEdits,
  EditableTextCell,
  EditableSelectInputCell,
  SearchIcon,
  CodeBranchIcon,
  CodeIcon,
  CubeIcon,
  css,
  styles,
  DemoSortableTable
};
DocumentationComponentsTableReactDocs.Component = () => (
  <React.Fragment>
    <p {...{"className":"ws-p"}}>
      {`Note: Table lives in its own package at `}
      <a {...{"href":"https://www.npmjs.com/package/@patternfly/react-table"}}>
        {`@patternfly/react-table`}
      </a>
      {`!`}
    </p>
    <AutoLinkHeader {...{"size":"h2","className":"ws-title ws-h2"}}>
      {`Examples`}
    </AutoLinkHeader>
    <Example {...DocumentationComponentsTableReactDocs} {...{"code":"import React from 'react';\n\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  textCenter,\n} from '@patternfly/react-table';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\n\nclass SimpleTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [\n        { title: 'Repositories' },\n        'Branches',\n        { title: 'Pull requests' },\n        'Workspaces',\n        {\n          title: 'Last Commit',\n          transforms: [textCenter],\n          cellTransforms: [textCenter]\n        }\n      ],\n      rows: [\n        {\n          cells: ['one', 'two', 'three', 'four', 'five']\n        },\n        {\n          cells: [\n            {\n              title: <div>one - 2</div>,\n              props: { title: 'hover title', colSpan: 3 }\n            },\n            'four - 2',\n            'five - 2'\n          ]\n        },\n        {\n          cells: [\n            'one - 3',\n            'two - 3',\n            'three - 3',\n            'four - 3',\n            {\n              title: 'five - 3 (not centered)',\n              props: { textCenter: false }\n            }\n          ]\n        }\n      ]\n    };\n  }\n\n  render() {\n    const { columns, rows } = this.state;\n\n    return (\n      <Table aria-label=\"Simple Table\" cells={columns} rows={rows}>\n        <TableHeader className={styles.modifiers.nowrap}/>\n        <TableBody />\n      </Table>\n    );\n  }\n}","title":"Basic","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsTableReactDocs} {...{"code":"import React from 'react';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n} from '@patternfly/react-table';\n\nclass RowClickTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [\n        { title: 'Repositories' },\n        'Branches',\n        { title: 'Pull requests' },\n        'Workspaces'\n      ],\n      rows: [\n        {\n          cells: ['Repositories one', 'Branches one', 'Pull requests one', 'Workspaces one']\n        },\n        {\n          cells: ['Repositories two', 'Branches two', 'Pull requests two', 'Workspaces two']\n        },\n        {\n          cells: ['Repositories three', 'Branches three', 'Pull requests three', 'Workspaces three']\n        }\n      ]\n    };\n    this.rowClickHandler = (event, row) => {\n      console.log('handle row click', row);\n    }\n  }\n\n  render() {\n    const { columns, rows } = this.state;\n\n    return (\n      <Table caption=\"Row Click Handler Table\" cells={columns} rows={rows}>\n        <TableHeader />\n        <TableBody onRowClick={this.rowClickHandler} />\n      </Table>\n    );\n  }\n}","title":"Row click handler","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsTableReactDocs} {...{"code":"import React from 'react';\nimport {\n  Table,\n  TableHeader,\n  TableBody\n} from '@patternfly/react-table';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\n\nclass RowWrapperTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [\n        { title: 'Repositories' },\n        'Branches',\n        { title: 'Pull requests' },\n        'Workspaces'\n      ],\n      rows: [\n        {\n          cells: ['Repositories one', 'Branches one', 'Pull requests one', 'Workspaces one']\n        },\n        {\n          cells: ['Repositories two', 'Branches two', 'Pull requests two', 'Workspaces two']\n        },\n        {\n          cells: ['Repositories three', 'Branches three', 'Pull requests three', 'Workspaces three']\n        }\n      ]\n    };\n    this.customRowWrapper = ({\n      trRef,\n      className,\n      rowProps,\n      row: { isExpanded, isHeightAuto },\n      ...props\n    }) => {\n      const isOddRow = (rowProps.rowIndex + 1) % 2;\n      const customStyle = {\n        borderLeft: '3px solid var(--pf-global--primary-color--100)'\n      }\n      return (\n        <tr\n          {...props}\n          ref={trRef}\n          className={css(\n            className,\n            (isOddRow ? 'odd-row-class' : 'even-row-class'),\n            'custom-static-class',\n            isExpanded !== undefined && styles.tableExpandableRow,\n            isExpanded && styles.modifiers.expanded,\n            isHeightAuto && styles.modifiers.heightAuto\n          )}\n          hidden={isExpanded !== undefined && !isExpanded}\n          style={isOddRow ? customStyle : {}}\n        />\n      );\n    }\n  }\n\n  render() {\n    const { columns, rows } = this.state;\n\n    return (\n      <Table caption=\"Table with custom row wrapper that styles odd rows\" cells={columns} rows={rows} rowWrapper={this.customRowWrapper}>\n        <TableHeader />\n        <TableBody />\n      </Table>\n    );\n  }\n}","title":"Custom row wrapper","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsTableReactDocs} {...{"code":"import React from 'react';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n  SortByDirection\n} from '@patternfly/react-table';\n\nclass SortableTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [\n        { title: 'Repositories', transforms: [sortable] },\n        'Branches',\n        { title: 'Pull requests', transforms: [sortable] },\n        'Workspaces',\n        'Last Commit'\n      ],\n      rows: [['one', 'two', 'a', 'four', 'five'], ['a', 'two', 'k', 'four', 'five'], ['p', 'two', 'b', 'four', 'five']],\n      sortBy: {}\n    };\n    this.onSort = this.onSort.bind(this);\n  }\n\n  onSort(_event, index, direction) {\n    const sortedRows = this.state.rows.sort((a, b) => (a[index] < b[index] ? -1 : a[index] > b[index] ? 1 : 0));\n    this.setState({\n      sortBy: {\n        index,\n        direction\n      },\n      rows: direction === SortByDirection.asc ? sortedRows : sortedRows.reverse()\n    });\n  }\n\n  render() {\n    const { columns, rows, sortBy } = this.state;\n\n    return (\n      <Table aria-label=\"Sortable Table\" sortBy={sortBy} onSort={this.onSort} cells={columns} rows={rows}>\n        <TableHeader />\n        <TableBody />\n      </Table>\n    );\n  }\n}","title":"Sortable","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsTableReactDocs} {...{"code":"import React from 'react';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n  SortByDirection,\n  wrappable,\n} from '@patternfly/react-table';\n\nclass SortableWrappingHeaders extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [\n        {\n          title: 'This is a really long table header that goes on for a long time 1.',\n          transforms: [sortable, wrappable]\n        },\n        {\n          title: 'This is a really long table header that goes on for a long time 2.',\n          transforms: [sortable, wrappable]\n        },\n        {\n          title: 'This is a really long table header that goes on for a long time 3.',\n          transforms: [sortable,wrappable]\n        },\n        {\n          title: 'This is a really long table header that goes on for a long time 4.',\n          transforms: [sortable, wrappable]\n        },\n        {\n          title: 'This is a really long table header that goes on for a long time 5.',\n          transforms: [sortable, wrappable]\n        },\n      ],\n      rows: [['one', 'two', 'a', 'four', 'five'], ['a', 'two', 'k', 'four', 'five'], ['p', 'two', 'b', 'four', 'five']],\n      sortBy: {}\n    };\n    this.onSort = this.onSort.bind(this);\n  }\n\n  onSort(_event, index, direction) {\n    const sortedRows = this.state.rows.sort((a, b) => (a[index] < b[index] ? -1 : a[index] > b[index] ? 1 : 0));\n    this.setState({\n      sortBy: {\n        index,\n        direction\n      },\n      rows: direction === SortByDirection.asc ? sortedRows : sortedRows.reverse()\n    });\n  }\n\n  render() {\n    const { columns, rows, sortBy } = this.state;\n\n    return (\n      <Table aria-label=\"Sortable with Wrapping Headers\" sortBy={sortBy} onSort={this.onSort} cells={columns} rows={rows}>\n        <TableHeader />\n        <TableBody />\n      </Table>\n    );\n  }\n}","title":"Sortable with wrapping headers","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsTableReactDocs} {...{"code":"import React from 'react';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n  SortByDirection,\n  headerCol,\n  TableVariant,\n  expandable,\n  cellWidth\n} from '@patternfly/react-table';\nimport {\n    Checkbox\n} from '@patternfly/react-core';\n\nclass SelectableTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [\n        { title: 'Repositories', cellTransforms: [headerCol()] },\n        'Branches',\n        { title: 'Pull requests' },\n        'Workspaces',\n        'Last Commit'\n      ],\n      rows: [\n        {\n          cells: ['one', 'two', 'a', 'four', 'five']\n        },\n        {\n          cells: ['a', 'two', 'k', 'four', 'five'],\n          disableCheckbox: true,\n        },\n        {\n          cells: ['p', 'two', 'b', 'four', 'five']\n        }\n      ],\n      canSelectAll: true\n    };\n    this.onSelect = this.onSelect.bind(this);\n    this.toggleSelect = this.toggleSelect.bind(this);\n  }\n\n  onSelect(event, isSelected, rowId) {\n    let rows;\n    if (rowId === -1) {\n      rows = this.state.rows.map(oneRow => {\n        oneRow.selected = isSelected;\n        return oneRow;\n      });\n    } else {\n      rows = [...this.state.rows];\n      rows[rowId].selected = isSelected;\n    }\n    this.setState({\n      rows\n    });\n  }\n\n  toggleSelect(checked) {\n    this.setState({\n      canSelectAll: checked\n    });\n  }\n\n  render() {\n    const { columns, rows, canSelectAll } = this.state;\n\n    return (\n      <div>\n        <Checkbox\n          label=\"Can select all\"\n          className=\"pf-u-mb-lg\"\n          isChecked={canSelectAll}\n          onChange={this.toggleSelect}\n          aria-label=\"toggle select all checkbox\"\n          id=\"toggle-select-all\"\n          name=\"toggle-select-all\"\n          />\n        <Table\n          onSelect={this.onSelect}\n          canSelectAll={canSelectAll}\n          aria-label=\"Selectable Table\"\n          cells={columns}\n          rows={rows}>\n          <TableHeader />\n          <TableBody />\n        </Table>\n      </div>\n    );\n  }\n}","title":"Selectable","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsTableReactDocs} {...{"code":"import React from 'react';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  headerCol\n} from '@patternfly/react-table';\n\nclass SimpleActionsTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [\n        { title: 'Repositories', cellTransforms: [headerCol()] },\n        'Branches',\n        { title: 'Pull requests' },\n        'Workspaces',\n        'Last Commit'\n      ],\n      rows: [\n        {\n          cells: ['one', 'two', 'a', 'four', 'five']\n        },\n        {\n          cells: ['a', 'two', 'k', 'four', 'five']\n        },\n        {\n          cells: ['p', 'two', 'b', 'four', 'five'],\n          disableActions: true\n        }\n      ],\n      actions: [\n        {\n          title: 'Some action',\n          onClick: (event, rowId, rowData, extra) => console.log('clicked on Some action, on row: ', rowId)\n        },\n        {\n          title: <a href=\"https://www.patternfly.org\">Link action</a>\n        },\n        {\n          isSeparator: true\n        },\n        {\n          title: 'Third action',\n          onClick: (event, rowId, rowData, extra) => console.log('clicked on Third action, on row: ', rowId)\n        }\n      ]\n    };\n  }\n\n  render() {\n    const { columns, rows, actions } = this.state;\n    return (\n      <Table aria-label=\"Actions Table\" actions={actions} cells={columns} rows={rows}>\n        <TableHeader />\n        <TableBody />\n      </Table>\n    );\n  }\n}","title":"Simple actions","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsTableReactDocs} {...{"code":"import React from 'react';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  headerCol\n} from '@patternfly/react-table';\n\nclass ActionsTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [\n        { title: 'Repositories', cellTransforms: [headerCol()] },\n        'Branches',\n        { title: 'Pull requests' },\n        'Workspaces',\n        'Last Commit'\n      ],\n      rows: [\n        {\n          cells: ['one', 'two', 'a', 'four', 'five'],\n          type: 'green',\n          actionProps: {\n            dropdownPosition: 'right',\n            dropdownDirection: 'up'\n          }\n        },\n        {\n          cells: ['a', 'two', 'k', 'four', 'five'],\n          actionProps: {\n            'data-specific-attr': 'some-value'\n          }\n        },\n        {\n          cells: ['p', 'two', 'b', 'four', 'five'],\n          type: 'blue'\n        },\n        {\n          cells: ['5', '2', 'b', 'four', 'five']\n        }\n      ]\n    };\n  }\n\n  actionResolver(rowData, { rowIndex }) {\n    if (rowIndex === 1) {\n      return null;\n    }\n\n    const thirdAction =\n      rowData.type === 'blue'\n        ? [\n            {\n              isSeparator: true\n            },\n            {\n              title: 'Third action',\n              onClick: (event, rowId, rowData, extra) =>\n                console.log(`clicked on Third action, on row ${rowId} of type ${rowData.type}`)\n            }\n          ]\n        : [];\n\n    return [\n      {\n        title: 'Some action',\n        onClick: (event, rowId, rowData, extra) =>\n          console.log(`clicked on Some action, on row ${rowId} of type ${rowData.type}`)\n      },\n      {\n        title: <div>Another action</div>,\n        onClick: (event, rowId, rowData, extra) =>\n          console.log(`clicked on Another action, on row ${rowId} of type ${rowData.type}`)\n      },\n      ...thirdAction\n    ];\n  }\n\n  areActionsDisabled(rowData, { rowIndex }) {\n    return rowIndex === 3;\n  }\n\n  render() {\n    const { columns, rows } = this.state;\n    return (\n      <Table\n        aria-label=\"Actions Table\"\n        cells={columns}\n        rows={rows}\n        actionResolver={this.actionResolver}\n        areActionsDisabled={this.areActionsDisabled}\n      >\n        <TableHeader />\n        <TableBody />\n      </Table>\n    );\n  }\n}","title":"Actions","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsTableReactDocs} {...{"code":"import React from 'react';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  headerCol\n} from '@patternfly/react-table';\n\nclass CellHeader extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [\n        { title: 'Header cell', cellTransforms: [headerCol('selectable')] },\n        'Branches',\n        { title: 'Pull requests' },\n        'Workspaces',\n        'Last Commit'\n      ],\n      rows: [['one', 'two', 'three', 'four', 'five']]\n    };\n  }\n\n  render() {\n    const { columns, rows } = this.state;\n\n    return (\n      <Table aria-label=\"First cell as Header\" rows={rows} cells={columns}>\n        <TableHeader />\n        <TableBody />\n      </Table>\n    );\n  }\n}","title":"First cell as header","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsTableReactDocs} {...{"code":"import React from 'react';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableVariant\n} from '@patternfly/react-table';\n\nclass CompactTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [\n        { title: 'Header cell' },\n        'Branches',\n        { title: 'Pull requests', props: { className: 'pf-u-text-align-center' } },\n        '' // deliberately empty\n      ],\n      rows: [['one', 'two', 'three', 'four'], ['one', 'two', 'three', 'four'], ['one', 'two', 'three', 'four']]\n    };\n  }\n\n  render() {\n    const { columns, rows } = this.state;\n\n    return (\n      <Table aria-label=\"Compact Table\" variant={TableVariant.compact} cells={columns} rows={rows}>\n        <TableHeader />\n        <TableBody />\n      </Table>\n    );\n  }\n}","title":"Compact","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsTableReactDocs} {...{"code":"import React from 'react';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableVariant\n} from '@patternfly/react-table';\n\nclass CompactTableBorderlessRows extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [\n        { title: 'Header cell' },\n        'Branches',\n        { title: 'Pull requests', props: { className: 'pf-u-text-align-center' } },\n        '' // deliberately empty\n      ],\n      rows: [['one', 'two', 'three', 'four'], ['one', 'two', 'three', 'four'], ['one', 'two', 'three', 'four']]\n    };\n  }\n\n  render() {\n    const { columns, rows } = this.state;\n\n    return (\n      <Table\n        aria-label=\"Compact Table with borderless rows\"\n        variant={TableVariant.compact}\n        borders={false}\n        cells={columns}\n        rows={rows}\n      >\n        <TableHeader />\n        <TableBody />\n      </Table>\n    );\n  }\n}","title":"Compact borderless rows","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsTableReactDocs} {...{"code":"import React from 'react';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableVariant,\n  expandable\n} from '@patternfly/react-table';\n\nclass CompactExpandableTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [\n        {\n          title: 'Header cell',\n          cellFormatters: [expandable]\n        },\n        'Branches',\n        { title: 'Pull requests' },\n        '' // deliberately empty\n      ],\n      rows: [\n        {\n          cells: ['one', 'two', 'three', 'four']\n        },\n        {\n          isOpen: true,\n          cells: ['parent - 1', 'two', 'three', 'four']\n        },\n        {\n          parent: 1,\n          fullWidth: true,\n          cells: ['child - 1']\n        },\n        {\n          isOpen: false,\n          cells: ['parent - 2', 'two', 'three', 'four']\n        },\n        {\n          parent: 3,\n          cells: ['child - 2']\n        },\n        {\n          isOpen: false,\n          cells: ['parent - 3', 'two', 'three', 'four']\n        },\n        {\n          parent: 5,\n          fullWidth: true,\n          noPadding: true,\n          cells: ['child - 3']\n        }\n      ]\n    };\n    this.onCollapse = this.onCollapse.bind(this);\n  }\n\n  onCollapse(event, rowKey, isOpen) {\n    const { rows } = this.state;\n    /**\n     * Please do not use rowKey as row index for more complex tables.\n     * Rather use some kind of identifier like ID passed with each row.\n     */\n    rows[rowKey].isOpen = isOpen;\n    this.setState({\n      rows\n    });\n  }\n\n  render() {\n    const { columns, rows } = this.state;\n\n    return (\n      <Table\n        aria-label=\"Compact expandable table\"\n        variant={TableVariant.compact}\n        onCollapse={this.onCollapse}\n        rows={rows}\n        cells={columns}\n      >\n        <TableHeader />\n        <TableBody />\n      </Table>\n    );\n  }\n}","title":"Compact expandable","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsTableReactDocs} {...{"code":"import React from 'react';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  cellWidth\n} from '@patternfly/react-table';\n\nclass WidthTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [\n        { title: 'Header cell', transforms: [cellWidth(10)] },\n        'Branches',\n        { title: 'Pull requests', transforms: [cellWidth(30)] },\n        'Workspaces',\n        {\n          title: 'Last Commit',\n          transforms: [cellWidth('max')]\n        }\n      ],\n      rows: [['one', 'two', 'three', 'four', 'five']]\n    };\n  }\n\n  render() {\n    const { columns, rows } = this.state;\n\n    return (\n      <Table aria-label=\"Table with Width Modifiers\" cells={columns} rows={rows}>\n        <TableHeader />\n        <TableBody />\n      </Table>\n    );\n  }\n}","title":"With width modifiers","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsTableReactDocs} {...{"code":"import React from 'react';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n  classNames,\n  Visibility\n} from '@patternfly/react-table';\n\nclass HiddenVisibleBreakpointTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [\n        {\n          title: 'Repositories',\n          columnTransforms: [classNames(Visibility.hidden, Visibility.visibleOnMd, Visibility.hiddenOnLg, Visibility.visibleOn_2xl)]\n        },\n        'Branches',\n        {\n          title: 'Pull requests',\n          columnTransforms: [classNames(Visibility.hiddenOnMd, Visibility.visibleOnLg, Visibility.hiddenOn_2xl)]\n        },\n        'Workspaces',\n        {\n          title: 'Last Commit',\n          columnTransforms: [classNames(Visibility.hidden, Visibility.visibleOnSm)]\n        }\n      ],\n      rows: [\n        ['Visible only on md breakpoint', '10', 'Hidden only on md breakpoint', '5', 'Hidden on xs breakpoint'],\n        ['Repository 2', '10', '25', '5', '2 days ago'],\n        ['Repository 3', '10', '25', '5', '2 days ago'],\n        ['Repository 4', '10', '25', '5', '2 days ago']\n      ]\n    };\n  }\n\n  render() {\n    const { columns, rows } = this.state;\n\n    return (\n      <Table aria-label=\"Table with hidden/visible breakpoint modifiers\" cells={columns} rows={rows}>\n        <TableHeader />\n        <TableBody />\n      </Table>\n    );\n  }\n}","title":"Breakpoint modifiers","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsTableReactDocs} {...{"code":"import React from 'react';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  expandable\n} from '@patternfly/react-table';\n\nclass CollapsibleTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [\n        {\n          title: 'Header cell',\n          cellFormatters: [expandable]\n        },\n        'Branches',\n        { title: 'Pull requests' },\n        'Workspaces',\n        {\n          title: 'Last Commit'\n        }\n      ],\n      rows: [\n        {\n          cells: ['one', 'two', 'three', 'four', 'five']\n        },\n        {\n          isOpen: true,\n          cells: ['parent - 1', 'two', 'three', 'four', 'five']\n        },\n        {\n          parent: 1,\n          fullWidth: true,\n          cells: ['child - 1']\n        },\n        {\n          isOpen: false,\n          cells: ['parent - 2', 'two', 'three', 'four', 'five']\n        },\n        {\n          parent: 3,\n          cells: ['child - 2']\n        },\n        {\n          isOpen: false,\n          cells: ['parent - 3', 'two', 'three', 'four', 'five']\n        },\n        {\n          parent: 5,\n          fullWidth: true,\n          noPadding: true,\n          cells: ['child - 3']\n        }\n      ]\n    };\n    this.onCollapse = this.onCollapse.bind(this);\n  }\n\n  onCollapse(event, rowKey, isOpen) {\n    const { rows } = this.state;\n    /**\n     * Please do not use rowKey as row index for more complex tables.\n     * Rather use some kind of identifier like ID passed with each row.\n     */\n    rows[rowKey].isOpen = isOpen;\n    this.setState({\n      rows\n    });\n  }\n\n  render() {\n    const { columns, rows } = this.state;\n\n    return (\n      <Table aria-label=\"Collapsible table\" onCollapse={this.onCollapse} rows={rows} cells={columns}>\n        <TableHeader />\n        <TableBody />\n      </Table>\n    );\n  }\n}","title":"Collapsible","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsTableReactDocs} {...{"code":"import React from 'react';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  compoundExpand\n} from '@patternfly/react-table';\n\nimport {\n  CodeBranchIcon,\n  CodeIcon,\n  CubeIcon\n} from '@patternfly/react-icons';\n\n// https://github.com/patternfly/patternfly-react/blob/master/packages/react-table/src/components/Table/demo/DemoSortableTable.js\nimport DemoSortableTable from './demo/DemoSortableTable';\n\nclass CompoundExpandableTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [\n        'Repositories',\n        {\n          title: 'Branches',\n          cellTransforms: [compoundExpand]\n        },\n        {\n          title: 'Pull requests',\n          cellTransforms: [compoundExpand]\n        },\n        {\n          title: 'Workspaces',\n          cellTransforms: [compoundExpand]\n        },\n        'Last Commit',\n        ''\n      ],\n      rows: [\n        {\n          isOpen: true,\n          cells: [\n            { title: <a href=\"#\">siemur/test-space</a>, props: { component: 'th'} },\n            {\n              title: (\n                <React.Fragment>\n                  <CodeBranchIcon key=\"icon\" /> 10\n                </React.Fragment>\n              ),\n              props: { isOpen: true, ariaControls : 'compound-expansion-table-1' }\n            },\n            {\n              title: (\n                <React.Fragment>\n                  <CodeIcon key=\"icon\" /> 4\n                </React.Fragment>\n              ),\n              props: { isOpen: false, ariaControls : 'compound-expansion-table-2' }\n            },\n            {\n              title: (\n                <React.Fragment>\n                  <CubeIcon key=\"icon\" /> 4\n                </React.Fragment>\n              ),\n              props: { isOpen: false, ariaControls : 'compound-expansion-table-3' }\n            },\n            '20 minutes',\n            { title: <a href=\"#\">Open in Github</a> }\n          ]\n        },\n        {\n          parent: 0,\n          compoundParent: 1,\n          cells: [\n            {\n              title: <DemoSortableTable firstColumnRows={['parent-0', 'compound-1', 'three', 'four','five']} id=\"compound-expansion-table-1\" />,\n              props: { colSpan: 6, className: 'pf-m-no-padding' }\n            }\n          ]\n        },\n        {\n          parent: 0,\n          compoundParent: 2,\n          cells: [\n            {\n              title: <DemoSortableTable firstColumnRows={['parent-0', 'compound-2', 'three', 'four','five']} id=\"compound-expansion-table-2\" />,\n              props: { colSpan: 6, className: 'pf-m-no-padding' }\n            }\n          ]\n        },\n        {\n          parent: 0,\n          compoundParent: 3,\n          cells: [\n            {\n              title: <DemoSortableTable firstColumnRows={['parent-0', 'compound-3', 'three', 'four','five']} id=\"compound-expansion-table-3\" />,\n              props: { colSpan: 6, className: 'pf-m-no-padding' }\n            }\n          ]\n        },\n        {\n          isOpen: false,\n          cells: [\n            { title: <a href=\"#\">siemur/test-space</a>, props: { component: 'th'} },\n            {\n              title: (\n                <React.Fragment>\n                  <CodeBranchIcon key=\"icon\" /> 3\n                </React.Fragment>\n              ),\n              props: { isOpen: false, ariaControls : 'compound-expansion-table-4' }\n            },\n            {\n              title: (\n                <React.Fragment>\n                  <CodeIcon key=\"icon\" /> 4\n                </React.Fragment>\n              ),\n              props: { isOpen: false, ariaControls : 'compound-expansion-table-5' }\n            },\n            {\n              title: (\n                <React.Fragment>\n                  <CubeIcon key=\"icon\" /> 2\n                </React.Fragment>\n              ),\n              props: { isOpen: false, ariaControls : 'compound-expansion-table-6' }\n            },\n            '20 minutes',\n            { title: <a href=\"#\">Open in Github</a> }\n          ]\n        },\n        {\n          parent: 4,\n          compoundParent: 1,\n          cells: [\n            {\n              title: <DemoSortableTable firstColumnRows={['parent-4', 'compound-1', 'three', 'four','five']} id=\"compound-expansion-table-4\" />,\n              props: { colSpan: 6, className: 'pf-m-no-padding' }\n            }\n          ]\n        },\n        {\n          parent: 4,\n          compoundParent: 2,\n          cells: [\n            {\n              title: <DemoSortableTable firstColumnRows={['parent-4', 'compound-2', 'three', 'four','five']} id=\"compound-expansion-table-5\"/>,\n              props: { colSpan: 6, className: 'pf-m-no-padding' }\n            }\n          ]\n        },\n        {\n          parent: 4,\n          compoundParent: 3,\n          cells: [\n            {\n              title: <DemoSortableTable firstColumnRows={['parent-4', 'compound-3', 'three', 'four','five']} id=\"compound-expansion-table-6\"/>,\n              props: { colSpan: 6, className: 'pf-m-no-padding' }\n            }\n          ]\n        }\n      ]\n    };\n    this.onExpand = this.onExpand.bind(this);\n  }\n\n  onExpand(event, rowIndex, colIndex, isOpen, rowData, extraData) {\n    const { rows } = this.state;\n    if (!isOpen) {\n      // set all other expanded cells false in this row if we are expanding\n      rows[rowIndex].cells.forEach(cell => {\n        if (cell.props) cell.props.isOpen = false;\n      });\n      rows[rowIndex].cells[colIndex].props.isOpen = true;\n      rows[rowIndex].isOpen = true;\n    } else {\n      rows[rowIndex].cells[colIndex].props.isOpen = false;\n      rows[rowIndex].isOpen = rows[rowIndex].cells.some(cell => cell.props && cell.props.isOpen);\n    }\n    this.setState({\n      rows\n    });\n  }\n\n  render() {\n    const { columns, rows } = this.state;\n\n    return (\n      <Table aria-label=\"Compound expandable table\" onExpand={this.onExpand} rows={rows} cells={columns}>\n        <TableHeader />\n        <TableBody />\n      </Table>\n    );\n  }\n}","title":"Compound expandable","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsTableReactDocs} {...{"code":"import React from 'react';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  wrappable,\n  truncate,\n  nowrap,\n  breakWord,\n  cellWidth,\n  fitContent,\n} from '@patternfly/react-table';\n\nclass ControllingText extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [\n        {title: 'Truncate (width 20%)', transforms: [cellWidth(20)], cellTransforms: [truncate]},\n        {title: 'Break word', cellTransforms: [breakWord]},\n        {title: 'Wrapping table header text. This th text will wrap instead of truncate.', transforms: [wrappable]},\n        {title: 'Fit content', transforms: [fitContent]},\n        {title: '', cellTransforms: [nowrap]},\n      ],\n      rows: [\n        [\n          'This text will truncate instead of wrap.',\n          {title: <a href=\"#\">http://thisisaverylongurlthatneedstobreakusethebreakwordmodifier.org</a>},\n          {title: <p>By default,\n            <code>thead</code> cells will truncate and\n            <code>tbody</code> cells will wrap. Use\n            <code>.pf-m-wrap</code> on a\n            <code>th</code> to change its behavior.</p>\n          },\n          'This cell\\'s content will adjust itself to the parent th width. This modifier only affects table layouts.',\n          {title: <a href=\"#\">No wrap</a>}\n        ]\n      ]\n    };\n  }\n\n  render() {\n    const { columns, rows } = this.state;\n\n    return (\n      <Table aria-label=\"Controlling text\" cells={columns} rows={rows}>\n        <TableHeader />\n        <TableBody />\n      </Table>\n    );\n  }\n}","title":"Controlling text","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsTableReactDocs} {...{"code":"import React from 'react';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableText,\n  wrappable,\n  truncate,\n  nowrap,\n  breakWord,\n  cellWidth,\n  fitContent,\n} from '@patternfly/react-table';\n\nclass ModifiersWithTableText extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [\n        {title: 'Truncating text', transforms: [cellWidth(30)]},\n        {title: 'Wrapping table header text. This th text will wrap instead of truncate.'},\n      ],\n      rows: [\n        [\n          {title: <TableText wrapModifier='truncate'>This text will truncate instead of wrap.</TableText>},\n          {title: <TableText wrapModifier='nowrap'><a href=\"#\">This is a link that needs to be on one line and fully readable.</a></TableText>},\n        ]\n      ]\n    };\n  }\n\n  render() {\n    const { columns, rows } = this.state;\n\n    return (\n      <Table aria-label=\"Controlling text\" cells={columns} rows={rows}>\n        <TableHeader />\n        <TableBody />\n      </Table>\n    );\n  }\n}","title":"Modifiers with table text","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsTableReactDocs} {...{"code":"import React from 'react';\nimport { Table, TableHeader, TableBody } from '@patternfly/react-table';\nimport { Button, EmptyState, EmptyStateBody, EmptyStatePrimary, Bullseye, Title } from '@patternfly/react-core';\nimport { EmptyStateIcon } from '@patternfly/react-icons';\n\nEmptyStateTable = () => {\n  const columns = ['Repositories', 'Branches', 'Pull requests', 'Workspaces', 'Last Commit']\n  const rows = []\n  return (\n    <React.Fragment>\n    <Table caption=\"Empty State Table Example\" cells={columns} rows={rows}>\n      <TableHeader />\n      <TableBody />\n    </Table>\n    <EmptyState variant={EmptyStateVariant.small}>\n      <EmptyStateIcon icon={SearchIcon} />\n      <Title headingLevel=\"h2\" size=\"lg\">\n        No results found\n      </Title>\n      <EmptyStateBody>\n        No results match the filter criteria. Remove all filters or clear all filters to show results.\n      </EmptyStateBody>\n      <Button variant=\"link\">Clear all filters</Button>\n    </EmptyState>\n    </React.Fragment>\n  );\n}","title":"Empty state","lang":"js"}}>
    </Example>
    <Example {...DocumentationComponentsTableReactDocs} {...{"code":"import React from 'react';\nimport { TextInput, SelectOption } from '@patternfly/react-core';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableVariant,\n  getErrorTextByValidator,\n  cancelCellEdits,\n  validateCellEdits,\n  applyCellEdits,\n  EditableTextCell,\n  EditableSelectInputCell\n} from '@patternfly/react-table';\n\nclass EditableRowsTable extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      columns: [\n        'Text input col 1',\n        'Disabled text input col 2',\n        'Text input col 3',\n        'Text input col 4'\n      ],\n      actions: [{\n        title: 'Some action',\n        onClick: (event, rowId, rowData, extra) => console.log('clicked on Some action, on row: ', rowId)\n      }],\n      rows: [\n        {\n          rowEditBtnAriaLabel: idx => `Edit row ${idx}`,\n          rowSaveBtnAriaLabel: idx => `Save edits for row ${idx}`,\n          rowCancelBtnAriaLabel: idx => `Cancel edits for row ${idx}`,\n          rowEditValidationRules: [\n            {\n              name: 'required',\n              validator: value => value.trim() !== '',\n              errorText: 'This field is required'\n            }\n          ],\n          cells: [\n            {\n              title: (value, rowIndex, cellIndex, props) => (\n                <EditableTextCell\n                  value={value}\n                  rowIndex={rowIndex}\n                  cellIndex={cellIndex}\n                  props={props}\n                  handleTextInputChange={this.handleTextInputChange}\n                  inputAriaLabel=\"Row 1 cell 1 content\" />\n              ),\n              props: {\n                value: 'Row 1 cell 1 content',\n                name: 'uniqueIdRow1Cell1'\n              }\n            },\n            {\n              title: (value, rowIndex, cellIndex, props) => (\n                <EditableTextCell\n                  value={value}\n                  rowIndex={rowIndex}\n                  cellIndex={cellIndex}\n                  props={props}\n                  handleTextInputChange={this.handleTextInputChange}\n                  isDisabled\n                  inputAriaLabel=\"Row 1 cell 2 content\" />\n              ),\n              props: {\n                value: 'Row 1 cell 2, disabled content',\n                name: 'uniqueIdRow1Cell2'\n              }\n            },\n            {\n              title: (value, rowIndex, cellIndex, props) => (\n                <EditableTextCell\n                  value={value}\n                  rowIndex={rowIndex}\n                  cellIndex={cellIndex}\n                  props={props}\n                  handleTextInputChange={this.handleTextInputChange}\n                  inputAriaLabel=\"Row 1 cell 3 content\" />\n              ),\n              props: {\n                value: 'Row 1 cell 3 content',\n                name: 'uniqueIdRow1Cell3'\n              }\n            },\n            {\n              title: (value, rowIndex, cellIndex, props) => (\n                <EditableSelectInputCell\n                  value={value}\n                  rowIndex={rowIndex}\n                  cellIndex={cellIndex}\n                  props={props}\n                  onSelect={this.onSelect}\n                  isOpen={props.isSelectOpen}\n                  options={props.options.map((option, index) => (\n                    <SelectOption\n                      key={index}\n                      value={option.value}\n                      id={'uniqueIdRow1Cell4Option' + index}\n                      isPlaceholder={option.isPlaceholder}\n                    />\n                  ))}\n                  onToggle={(isOpen) => {this.onToggle(isOpen, rowIndex, cellIndex)}}\n                  selections={props.selected}\n                />\n              ),\n              props: {\n                value: ['Option 1'],\n                name: 'uniqueIdRow1Cell4',\n                isSelectOpen: props.isSelectOpen || false,\n                selected: props.selected || ['Option 1'],\n                options: [\n                  {value: 'Placeholder...', isPlaceholder: true},\n                  {value: 'Option 1'},\n                  {value: 'Option 2'},\n                  {value: 'Option 3'},\n                  {value: 'Option 4'},\n                  {value: 'Option 5'}\n                ],\n                editableSelectProps: {\n                  variant: 'single',\n                  'aria-label': \"Row 1 cell 4 content\",\n                }\n              }\n            },\n          ]\n        },\n        {\n          cells: [\n            {\n              title: (value, rowIndex, cellIndex, props) => (\n                <EditableTextCell\n                  value={value}\n                  rowIndex={rowIndex}\n                  cellIndex={cellIndex}\n                  props={props}\n                  handleTextInputChange={this.handleTextInputChange}\n                  inputAriaLabel=\"Row 2 cell 1 content\" />\n              ),\n              props: {\n                value: 'Row 2 cell 1 content',\n                name: 'uniqueIdRow2Cell1'\n              }\n            },\n            {\n              title: (value, rowIndex, cellIndex, props) => (\n                <EditableTextCell\n                  value={value}\n                  rowIndex={rowIndex}\n                  cellIndex={cellIndex}\n                  props={props}\n                  handleTextInputChange={this.handleTextInputChange}\n                  isDisabled\n                  inputAriaLabel=\"Row 2 cell 2 content\" />\n              ),\n              props: {\n                value: 'Row 2 cell 2, disabled content',\n                name: 'uniqueIdRow2Cell2'\n              }\n            },\n            {\n              title: (value, rowIndex, cellIndex, props) => (\n                <EditableTextCell\n                  value={value}\n                  rowIndex={rowIndex}\n                  cellIndex={cellIndex}\n                  props={props}\n                  handleTextInputChange={this.handleTextInputChange}\n                  inputAriaLabel=\"Row 2 cell 3 content\" />\n              ),\n              props: {\n                value: 'Row 2 cell 3 content',\n                name: 'uniqueIdRow2Cell3'\n              }\n            },\n            {\n              title: (value, rowIndex, cellIndex, props) => (\n                <EditableSelectInputCell\n                  value={value}\n                  rowIndex={rowIndex}\n                  cellIndex={cellIndex}\n                  props={props}\n                  onSelect={this.onSelect}\n                  clearSelection={this.clearSelection}\n                  isOpen={props.isSelectOpen}\n                  options={props.options.map((option, index) => {\n                    return (\n                    <SelectOption\n                      key={index}\n                      value={option.value}\n                      id={'uniqueIdRow2Cell4Option' + index}\n                      isPlaceholder={option.isPlaceholder}\n                    />\n                  )\n                  })}\n                  onToggle={(isOpen) => {this.onToggle(isOpen, rowIndex, cellIndex)}}\n                  selections={props.selected}\n                  />\n              ),\n              props: {\n                value: ['Placeholder...'],\n                name: 'uniqueIdRow2Cell4',\n                isSelectOpen: props.isSelectOpen || false,\n                selected: props.selected || [],\n                options: [\n                  {value: 'Placeholder...', isPlaceholder: true},\n                  {value: 'Option 1'},\n                  {value: 'Option 2'},\n                  {value: 'Option 3'},\n                  {value: 'Option 4'},\n                  {value: 'Option 5'}\n                ],\n                editableSelectProps: {\n                  variant: 'typeaheadmulti',\n                  'aria-label': \"Row 2 cell 4 content\",\n                  toggleId: 'editable-toggle'\n                }\n              }\n            },\n          ]\n        },\n        {\n          rowEditValidationRules: [\n            {\n              name: 'required',\n              validator: value => value.trim() !== '',\n              errorText: 'This field is required'\n            },\n            {\n              name: 'notFoo',\n              validator: value => value.trim().toLowerCase() !== 'foo',\n              errorText: 'Value cannot be \"foo\"'\n            },\n            {\n              name: 'minLength',\n              validator: value => value.trim().length >= 7,\n              errorText: 'Value must be at least 7 characters'\n            },\n            {\n              name: 'notXyz',\n              validator: value => value.trim().toLowerCase() !== 'xyz',\n              errorText: 'Value cannot be xyz'\n            }\n          ],\n          cells: [\n            {\n              title: (value, rowIndex, cellIndex, props) => (\n                <EditableTextCell\n                  value={value}\n                  rowIndex={rowIndex}\n                  cellIndex={cellIndex}\n                  props={props}\n                  handleTextInputChange={this.handleTextInputChange}\n                  inputAriaLabel=\"Row 3 cell 1 content\" />\n              ),\n              props: {\n                value: 'Row 3 cell 1 content',\n                name: 'uniqueIdRow3Cell1'\n              }\n            },\n            {\n              title: (value, rowIndex, cellIndex, props) => (\n                <EditableTextCell\n                  value={value}\n                  rowIndex={rowIndex}\n                  cellIndex={cellIndex}\n                  props={props}\n                  handleTextInputChange={this.handleTextInputChange}\n                  isDisabled\n                  inputAriaLabel=\"Row 3 cell 2 content\" />\n              ),\n              props: {\n                value: 'Row 3 cell 2, disabled content',\n                name: 'uniqueIdRow3Cell2'\n              }\n            },\n            {\n              title: (value, rowIndex, cellIndex, props) => (\n                <EditableTextCell\n                  value={value}\n                  rowIndex={rowIndex}\n                  cellIndex={cellIndex}\n                  props={props}\n                  handleTextInputChange={this.handleTextInputChange}\n                  inputAriaLabel=\"Row 3 cell 3 content\" />\n              ),\n              props: {\n                value: 'Row 3 cell 3 content',\n                name: 'uniqueIdRow3Cell3'\n              }\n            },\n            {\n              title: (value, rowIndex, cellIndex, props) => (\n                <EditableSelectInputCell\n                  value={value}\n                  rowIndex={rowIndex}\n                  cellIndex={cellIndex}\n                  props={props}\n                  onSelect={this.onSelect}\n                  clearSelection={this.clearSelection}\n                  isOpen={props.isSelectOpen}\n                  options={props.options.map((option, index) => (\n                    <SelectOption\n                      key={index}\n                      value={option.value}\n                      id={'uniqueIdRow3Cell4Option' + index}\n                      isPlaceholder={option.isPlaceholder}\n                    />\n                  ))}\n                  onToggle={(isOpen) => {this.onToggle(isOpen, rowIndex, cellIndex)}}\n                  selections={props.selected}\n                  />\n              ),\n              props: {\n                value: ['Option 3'],\n                name: 'uniqueIdRow3Cell4',\n                isSelectOpen: props.isSelectOpen || false,\n                selected: props.selected || ['Option 3'],\n                options: [\n                  {value: 'Placeholder...', isPlaceholder: true},\n                  {value: 'Option 1'},\n                  {value: 'Option 2'},\n                  {value: 'Option 3'},\n                  {value: 'Option 4'},\n                  {value: 'Option 5'}\n                ],\n                editableSelectProps: {\n                  variant: 'checkbox',\n                  'aria-label': \"Row 3 cell 4 content\",\n                }\n              }\n            }\n          ]\n        }\n      ]\n    };\n\n    this.updateEditableRows = (evt, type, isEditable, rowIndex, validationErrors) => {\n      let newRows = Array.from(this.state.rows);\n\n      if (validationErrors && Object.keys(validationErrors).length) {\n        newRows[rowIndex] = validateCellEdits(newRows[rowIndex], type, validationErrors);\n        this.setState({ rows: newRows });\n        return;\n      }\n\n      if (type === 'cancel') {\n        newRows[rowIndex] = cancelCellEdits(newRows[rowIndex]);\n        this.setState({ rows: newRows });\n        return;\n      }\n\n      newRows[rowIndex] = applyCellEdits(newRows[rowIndex], type);\n\n      this.setState({ rows: newRows });\n    };\n\n    this.handleTextInputChange = (newValue, evt, rowIndex, cellIndex) => {\n      let newRows = Array.from(this.state.rows);\n      newRows[rowIndex].cells[cellIndex].props.editableValue = newValue;\n      this.setState({\n        rows: newRows\n      });\n    };\n\n    this.onSelect = (newValue, evt, rowIndex, cellIndex, isPlaceholder) => {\n      const newRows = Array.from(this.state.rows);\n      const newCellProps = newRows[rowIndex].cells[cellIndex].props;\n\n      if (isPlaceholder) {\n        newCellProps.editableValue = [];\n        newCellProps.selected = [];\n      } else {\n        if (newCellProps.editableValue === undefined) {\n          newCellProps.editableValue = [];\n        }\n\n        let newSelected = Array.from(newCellProps.selected);\n\n        switch (newCellProps.editableSelectProps.variant) {\n          case 'typeaheadmulti':\n          case 'checkbox': {\n            if (!newSelected.includes(newValue)) {\n              newSelected.push(newValue);\n            } else {\n              newSelected = newSelected.filter(el => el !== newValue);\n            }\n            break;\n          }\n          default: {\n            newSelected = newValue;\n          }\n        }\n\n        newCellProps.editableValue = newSelected;\n        newCellProps.selected = newSelected;\n      }\n\n      this.setState({\n        rows: newRows\n      });\n    };\n    \n    this.clearSelection = (rowIndex, cellIndex) => {\n      const newRows = Array.from(this.state.rows);\n      const newCellProps = newRows[rowIndex].cells[cellIndex].props;\n      newCellProps.editableValue = [];\n      newCellProps.selected = [];\n      this.setState({\n        rows: newRows\n      });\n    };\n\n    this.onToggle = (isOpen, rowIndex, cellIndex) => {\n      let newRows = Array.from(this.state.rows);\n      newRows[rowIndex].cells[cellIndex].props.isSelectOpen = isOpen;\n      this.setState({\n        rows: newRows\n      });\n    };\n  }\n\n  render() {\n    const { columns, rows, actions } = this.state;\n\n    return (\n      <Table\n        actions={actions}\n        onRowEdit={this.updateEditableRows}\n        aria-label=\"Editable Rows Table\"\n        variant={TableVariant.compact}\n        cells={columns}\n        rows={rows}>\n          <TableHeader />\n          <TableBody />\n      </Table>\n    );\n  }\n}","title":"Editable rows","lang":"js","isBeta":true}}>
    </Example>
  </React.Fragment>
);
DocumentationComponentsTableReactDocs.Component.displayName = 'DocumentationComponentsTableReactDocs';
