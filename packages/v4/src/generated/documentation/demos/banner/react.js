import React from 'react';
import { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';
import { css } from '@patternfly/react-styles';
import { BellIcon, CogIcon, HelpIcon } from '@patternfly/react-icons';
import imgBrand from '../../../../../../../node_modules/@patternfly/react-core/src/demos/PageLayout/examples/./imgBrand.svg';
import imgAvatar from '../../../../../../../node_modules/@patternfly/react-core/src/demos/PageLayout/examples/./imgAvatar.svg';

export const DocumentationDemosBannerReactDocs = {
  "slug": "/documentation/demos/banner/react",
  "source": "react",
  "sourceLink": "https://github.com/patternfly/patternfly-react/blob/master/packages/react-core/src/demos/PageLayout/examples/BannerDemo.md",
  "section": "demos",
  "id": "Banner",
  "title": "Banner",
  "toc": [
    "Examples"
  ]
};
DocumentationDemosBannerReactDocs.liveContext = {
  css,
  BellIcon,
  CogIcon,
  HelpIcon,
  imgBrand,
  imgAvatar
};
DocumentationDemosBannerReactDocs.Component = () => (
  <React.Fragment>
    <AutoLinkHeader {...{"size":"h2","className":"ws-title ws-h2"}}>
      {`Examples`}
    </AutoLinkHeader>
    <Example {...DocumentationDemosBannerReactDocs} {...{"code":"import React from 'react';\nimport {\n  Avatar,\n  Brand,\n  Banner,\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  ButtonVariant,\n  Card,\n  CardBody,\n  Dropdown,\n  DropdownGroup,\n  DropdownToggle,\n  DropdownItem,\n  DropdownSeparator,\n  Flex,\n  Gallery,\n  GalleryItem,\n  KebabToggle,\n  Nav,\n  NavItem,\n  NavList,\n  Page,\n  PageHeader,\n  PageSection,\n  PageSectionVariants,\n  PageSidebar,\n  SkipToContent,\n  TextContent,\n  Text,\n  PageHeaderTools,\n  PageHeaderToolsGroup,\n  PageHeaderToolsItem\n} from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { BellIcon, CogIcon, HelpIcon } from '@patternfly/react-icons';\nimport imgBrand from './imgBrand.svg';\nimport imgAvatar from './imgAvatar.svg';\n\nclass BannerDemo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDropdownOpen: false,\n      isKebabDropdownOpen: false,\n      activeItem: 0\n    };\n    this.onDropdownToggle = isDropdownOpen => {\n      this.setState({\n        isDropdownOpen\n      });\n    };\n\n    this.onDropdownSelect = event => {\n      this.setState({\n        isDropdownOpen: !this.state.isDropdownOpen\n      });\n    };\n\n    this.onKebabDropdownToggle = isKebabDropdownOpen => {\n      this.setState({\n        isKebabDropdownOpen\n      });\n    };\n\n    this.onKebabDropdownSelect = event => {\n      this.setState({\n        isKebabDropdownOpen: !this.state.isKebabDropdownOpen\n      });\n    };\n\n    this.onNavSelect = result => {\n      this.setState({\n        activeItem: result.itemId\n      });\n    };\n  }\n\n  render() {\n    const { isDropdownOpen, isKebabDropdownOpen, activeItem } = this.state;\n\n    const PageNav = (\n      <Nav onSelect={this.onNavSelect} aria-label=\"Nav\">\n        <NavList>\n          <NavItem itemId={0} isActive={activeItem === 0}>\n            System Panel\n          </NavItem>\n          <NavItem itemId={1} isActive={activeItem === 1}>\n            Policy\n          </NavItem>\n          <NavItem itemId={2} isActive={activeItem === 2}>\n            Authentication\n          </NavItem>\n          <NavItem itemId={3} isActive={activeItem === 3}>\n            Network Services\n          </NavItem>\n          <NavItem itemId={4} isActive={activeItem === 4}>\n            Server\n          </NavItem>\n        </NavList>\n      </Nav>\n    );\n    const kebabDropdownItems = [\n      <DropdownItem key=\"settings\">\n        <CogIcon /> Settings\n      </DropdownItem>,\n      <DropdownItem key=\"help\">\n        <HelpIcon /> Help\n      </DropdownItem>\n    ];\n    const userDropdownItems = [\n      <DropdownGroup key=\"group 2\">\n        <DropdownItem key=\"group 2 profile\">My profile</DropdownItem>\n        <DropdownItem key=\"group 2 user\" component=\"button\">\n          User management\n        </DropdownItem>\n        <DropdownItem key=\"group 2 logout\">Logout</DropdownItem>\n      </DropdownGroup>\n    ];\n    const headerTools = (\n      <PageHeaderTools>\n        <PageHeaderToolsGroup\n          visibility={{\n            default: 'hidden',\n            lg: 'visible'\n          }} /** the settings and help icon buttons are only visible on desktop sizes and replaced by a kebab dropdown for other sizes */\n        >\n          <PageHeaderToolsItem>\n            <Button aria-label=\"Settings actions\" variant={ButtonVariant.plain}>\n              <CogIcon />\n            </Button>\n          </PageHeaderToolsItem>\n          <PageHeaderToolsItem>\n            <Button aria-label=\"Help actions\" variant={ButtonVariant.plain}>\n              <HelpIcon />\n            </Button>\n          </PageHeaderToolsItem>\n        </PageHeaderToolsGroup>\n        <PageHeaderToolsGroup>\n          <PageHeaderToolsItem\n            visibility={{\n              lg: 'hidden'\n            }} /** this kebab dropdown replaces the icon buttons and is hidden for desktop sizes */\n          >\n            <Dropdown\n              isPlain\n              position=\"right\"\n              onSelect={this.onKebabDropdownSelect}\n              toggle={<KebabToggle onToggle={this.onKebabDropdownToggle} />}\n              isOpen={isKebabDropdownOpen}\n              dropdownItems={kebabDropdownItems}\n            />\n          </PageHeaderToolsItem>\n          <PageHeaderToolsItem\n            visibility={{ default: 'hidden', md: 'visible' }} /** this user dropdown is hidden on mobile sizes */\n          >\n            <Dropdown\n              isPlain\n              position=\"right\"\n              onSelect={this.onDropdownSelect}\n              isOpen={isDropdownOpen}\n              toggle={<DropdownToggle onToggle={this.onDropdownToggle}>John Smith</DropdownToggle>}\n              dropdownItems={userDropdownItems}\n            />\n          </PageHeaderToolsItem>\n        </PageHeaderToolsGroup>\n        <Avatar src={imgAvatar} alt=\"Avatar image\" />\n      </PageHeaderTools>\n    );\n\n    const Header = (\n      <PageHeader logo={<Brand src={imgBrand} alt=\"Patternfly Logo\" />} headerTools={headerTools} showNavToggle />\n    );\n    const Sidebar = <PageSidebar nav={PageNav} />;\n    const pageId = 'main-content-page-layout-default-nav';\n    const PageSkipToContent = <SkipToContent href={`#${pageId}`}>Skip to content</SkipToContent>;\n\n    return (\n      <React.Fragment>\n        <Page\n          header={Header}\n          sidebar={Sidebar}\n          isManagedSidebar\n          skipToContent={PageSkipToContent}\n          mainContainerId={pageId}\n        >\n          <Banner isSticky>\n            <Flex\n              justifyContent={{ default: 'justifyContentCenter', lg: 'justifyContentSpaceBetween' }}\n              flexWrap={{ default: 'nowrap' }}\n            >\n              <div className=\"pf-u-display-none pf-u-display-block-on-lg\">Localhost</div>\n              <div className=\"pf-u-display-none pf-u-display-block-on-lg\">\n                This message is sticky to the top of the page.\n              </div>\n              <div className=\"pf-u-display-none-on-lg\">Drop some text on mobile, truncate if needed.</div>\n              <div className=\"pf-u-display-none pf-u-display-block-on-lg\">Ned Username</div>\n            </Flex>\n          </Banner>\n          <PageSection variant={PageSectionVariants.light}>\n            <TextContent>\n              <Text component=\"h1\">Main title</Text>\n              <Text component=\"p\">\n                Body text should be Overpass Regular at 16px. It should have leading of 24px because <br />\n                of itâ€™s relative line height of 1.5.\n              </Text>\n            </TextContent>\n          </PageSection>\n          <PageSection>\n            <Gallery hasGutter>\n              {Array.apply(0, Array(30)).map((x, i) => (\n                <GalleryItem key={i}>\n                  <Card key={i}>\n                    <CardBody>This is a card</CardBody>\n                  </Card>\n                </GalleryItem>\n              ))}\n            </Gallery>\n          </PageSection>\n        </Page>\n      </React.Fragment>\n    );\n  }\n}","title":"Basic sticky banner","lang":"js","isFullscreen":true}}>
    </Example>
    <Example {...DocumentationDemosBannerReactDocs} {...{"code":"import React from 'react';\nimport {\n  Avatar,\n  Brand,\n  Banner,\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  ButtonVariant,\n  Card,\n  CardBody,\n  Dropdown,\n  DropdownGroup,\n  DropdownToggle,\n  DropdownItem,\n  DropdownSeparator,\n  Flex,\n  FlexItem,\n  Gallery,\n  GalleryItem,\n  KebabToggle,\n  Nav,\n  NavItem,\n  NavList,\n  Page,\n  PageHeader,\n  PageSection,\n  PageSectionVariants,\n  PageSidebar,\n  SkipToContent,\n  TextContent,\n  Text,\n  PageHeaderTools,\n  PageHeaderToolsGroup,\n  PageHeaderToolsItem\n} from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { BellIcon, CogIcon, HelpIcon } from '@patternfly/react-icons';\nimport imgBrand from './imgBrand.svg';\nimport imgAvatar from './imgAvatar.svg';\n\nclass BannerDemo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDropdownOpen: false,\n      isKebabDropdownOpen: false,\n      activeItem: 0\n    };\n    this.onDropdownToggle = isDropdownOpen => {\n      this.setState({\n        isDropdownOpen\n      });\n    };\n\n    this.onDropdownSelect = event => {\n      this.setState({\n        isDropdownOpen: !this.state.isDropdownOpen\n      });\n    };\n\n    this.onKebabDropdownToggle = isKebabDropdownOpen => {\n      this.setState({\n        isKebabDropdownOpen\n      });\n    };\n\n    this.onKebabDropdownSelect = event => {\n      this.setState({\n        isKebabDropdownOpen: !this.state.isKebabDropdownOpen\n      });\n    };\n\n    this.onNavSelect = result => {\n      this.setState({\n        activeItem: result.itemId\n      });\n    };\n  }\n\n  render() {\n    const { isDropdownOpen, isKebabDropdownOpen, activeItem } = this.state;\n\n    const PageNav = (\n      <Nav onSelect={this.onNavSelect} aria-label=\"Nav\">\n        <NavList>\n          <NavItem itemId={0} isActive={activeItem === 0}>\n            System Panel\n          </NavItem>\n          <NavItem itemId={1} isActive={activeItem === 1}>\n            Policy\n          </NavItem>\n          <NavItem itemId={2} isActive={activeItem === 2}>\n            Authentication\n          </NavItem>\n          <NavItem itemId={3} isActive={activeItem === 3}>\n            Network Services\n          </NavItem>\n          <NavItem itemId={4} isActive={activeItem === 4}>\n            Server\n          </NavItem>\n        </NavList>\n      </Nav>\n    );\n    const kebabDropdownItems = [\n      <DropdownItem key=\"settings\">\n        <CogIcon /> Settings\n      </DropdownItem>,\n      <DropdownItem key=\"help\">\n        <HelpIcon /> Help\n      </DropdownItem>\n    ];\n    const userDropdownItems = [\n      <DropdownGroup key=\"group 2\">\n        <DropdownItem key=\"group 2 profile\">My profile</DropdownItem>\n        <DropdownItem key=\"group 2 user\" component=\"button\">\n          User management\n        </DropdownItem>\n        <DropdownItem key=\"group 2 logout\">Logout</DropdownItem>\n      </DropdownGroup>\n    ];\n    const headerTools = (\n      <PageHeaderTools>\n        <PageHeaderToolsGroup\n          visibility={{\n            default: 'hidden',\n            lg: 'visible'\n          }} /** the settings and help icon buttons are only visible on desktop sizes and replaced by a kebab dropdown for other sizes */\n        >\n          <PageHeaderToolsItem>\n            <Button aria-label=\"Settings actions\" variant={ButtonVariant.plain}>\n              <CogIcon />\n            </Button>\n          </PageHeaderToolsItem>\n          <PageHeaderToolsItem>\n            <Button aria-label=\"Help actions\" variant={ButtonVariant.plain}>\n              <HelpIcon />\n            </Button>\n          </PageHeaderToolsItem>\n        </PageHeaderToolsGroup>\n        <PageHeaderToolsGroup>\n          <PageHeaderToolsItem\n            visibility={{\n              lg: 'hidden'\n            }} /** this kebab dropdown replaces the icon buttons and is hidden for desktop sizes */\n          >\n            <Dropdown\n              isPlain\n              position=\"right\"\n              onSelect={this.onKebabDropdownSelect}\n              toggle={<KebabToggle onToggle={this.onKebabDropdownToggle} />}\n              isOpen={isKebabDropdownOpen}\n              dropdownItems={kebabDropdownItems}\n            />\n          </PageHeaderToolsItem>\n          <PageHeaderToolsItem\n            visibility={{ default: 'hidden', md: 'visible' }} /** this user dropdown is hidden on mobile sizes */\n          >\n            <Dropdown\n              isPlain\n              position=\"right\"\n              onSelect={this.onDropdownSelect}\n              isOpen={isDropdownOpen}\n              toggle={<DropdownToggle onToggle={this.onDropdownToggle}>John Smith</DropdownToggle>}\n              dropdownItems={userDropdownItems}\n            />\n          </PageHeaderToolsItem>\n        </PageHeaderToolsGroup>\n        <Avatar src={imgAvatar} alt=\"Avatar image\" />\n      </PageHeaderTools>\n    );\n\n    const Header = (\n      <PageHeader logo={<Brand src={imgBrand} alt=\"Patternfly Logo\" />} headerTools={headerTools} showNavToggle />\n    );\n    const Sidebar = <PageSidebar nav={PageNav} />;\n    const pageId = 'main-content-page-layout-default-nav';\n    const PageSkipToContent = <SkipToContent href={`#${pageId}`}>Skip to content</SkipToContent>;\n\n    return (\n      <React.Fragment>\n        <Flex\n          direction={{ default: 'column' }}\n          flexWrap={{ default: 'nowrap' }}\n          spaceItems={{ default: 'spaceItemsNone' }}\n          style={{ height: '100%' }}\n        >\n          <FlexItem>\n            <Banner isSticky>\n              <Flex\n                justifyContent={{ default: 'justifyContentCenter', lg: 'justifyContentSpaceBetween' }}\n                flexWrap={{ default: 'nowrap' }}\n              >\n                <div className=\"pf-u-display-none pf-u-display-block-on-lg\">Localhost</div>\n                <div className=\"pf-u-display-none pf-u-display-block-on-lg\">\n                  This message is sticky to the top of the page.\n                </div>\n                <div className=\"pf-u-display-none-on-lg\">Drop some text on mobile, truncate if needed.</div>\n                <div className=\"pf-u-display-none pf-u-display-block-on-lg\">Ned Username</div>\n              </Flex>\n            </Banner>\n          </FlexItem>\n          <FlexItem grow={{ default: 'grow' }} style={{ minHeight: 0 }}>\n            <Page\n              header={Header}\n              sidebar={Sidebar}\n              isManagedSidebar\n              skipToContent={PageSkipToContent}\n              mainContainerId={pageId}\n            >\n              <PageSection variant={PageSectionVariants.light}>\n                <TextContent>\n                  <Text component=\"h1\">Main title</Text>\n                  <Text component=\"p\">\n                    Body text should be Overpass Regular at 16px. It should have leading of 24px because <br />\n                    of itâ€™s relative line height of 1.5.\n                  </Text>\n                </TextContent>\n              </PageSection>\n              <PageSection>\n                <Gallery hasGutter>\n                  {Array.apply(0, Array(30)).map((x, i) => (\n                    <GalleryItem key={i}>\n                      <Card key={i}>\n                        <CardBody>This is a card</CardBody>\n                      </Card>\n                    </GalleryItem>\n                  ))}\n                </Gallery>\n              </PageSection>\n            </Page>\n          </FlexItem>\n          <FlexItem>\n            <Banner isSticky>\n              <Flex\n                justifyContent={{ default: 'justifyContentCenter', lg: 'justifyContentSpaceBetween' }}\n                flexWrap={{ default: 'nowrap' }}\n              >\n                <div className=\"pf-u-display-none pf-u-display-block-on-lg\">Localhost</div>\n                <div className=\"pf-u-display-none pf-u-display-block-on-lg\">\n                  This message is sticky to the bottom of the page.\n                </div>\n                <div className=\"pf-u-display-none-on-lg\">Drop some text on mobile, truncate if needed.</div>\n                <div className=\"pf-u-display-none pf-u-display-block-on-lg\">Ned Username</div>\n              </Flex>\n            </Banner>\n          </FlexItem>\n        </Flex>\n      </React.Fragment>\n    );\n  }\n}","title":"Top and bottom banner","lang":"js","isFullscreen":true}}>
    </Example>
  </React.Fragment>
);
DocumentationDemosBannerReactDocs.Component.displayName = 'DocumentationDemosBannerReactDocs';
